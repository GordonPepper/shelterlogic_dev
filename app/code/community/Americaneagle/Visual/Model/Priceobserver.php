<?php

/**
 * Created by PhpStorm.
 * User: astayart
 * Date: 12/18/15
 * Time: 5:07 PM
 */
class Americaneagle_Visual_Model_Priceobserver extends Mage_CatalogRule_Model_Observer
{
    public function prepareCatalogProductCollectionPrices(Varien_Event_Observer $observer) {
        return $this; //parent::prepareCatalogProductCollectionPrices($observer); // TODO: Change the autogenerated stub
    }

    public function addVisualPriceRulesToCollection(Varien_Event_Observer $observer) {
        $collection = $observer->getCollection();

        foreach ($collection as $product) {
            $fp = $this->getShelterlogicPriceRule(Mage::getSingleton('customer/session')->getCustomer(), $product);
            if($fp !== false) {
                $product->setFinalPrice($fp);
            }
        }

        return $this;

    }
    public function processFrontFinalPrice($observer) {
        $product    = $observer->getEvent()->getProduct();
        $pId        = $product->getId();
        $storeId    = $product->getStoreId();

        if ($observer->hasDate()) {
            $date = $observer->getEvent()->getDate();
        } else {
            $date = Mage::app()->getLocale()->storeTimeStamp($storeId);
        }

        if ($observer->hasWebsiteId()) {
            $wId = $observer->getEvent()->getWebsiteId();
        } else {
            $wId = Mage::app()->getStore($storeId)->getWebsiteId();
        }

        if ($observer->hasCustomerGroupId()) {
            $gId = $observer->getEvent()->getCustomerGroupId();
        } elseif ($product->hasCustomerGroupId()) {
            $gId = $product->getCustomerGroupId();
        } else {
            $gId = Mage::getSingleton('customer/session')->getCustomerGroupId();
        }

        /* shelterlogic base rules */
        if ($observer->hasCustomerId()) {
            $cId = $observer->getCustomerId();
        } elseif ($product->hasCustomerId()) {
            $cId = $product->getCustomerId();
        } else {
            $cId = Mage::getSingleton('customer/session')->getCustomerId();
        }


        $key = "$date|$wId|$gId|$pId|$cId";
        if (!isset($this->_rulePrices[$key])) {
            $rulePrice = $this->getShelterlogicPriceRule(Mage::getSingleton('customer/session')->getCustomer(), $product);
            $this->_rulePrices[$key] = $rulePrice;
        }
        if ($this->_rulePrices[$key]!==false) {
            $finalPrice = min($product->getData('final_price'), $this->_rulePrices[$key]);
            $product->setFinalPrice($finalPrice);
        }
        return $this;

    }

    public function getShelterlogicPriceRule(Mage_Customer_Model_Customer $customer, $product, $spid = null) {
        /** this is what the core rule looks like:
         *
         * $adapter = $this->_getReadAdapter();
         * $select  = $adapter->select()
         * ->from($this->getTable('catalogrule/rule_product_price'), array('product_id', 'rule_price'))
         * ->where('rule_date = ?', $this->formatDate($date, false))
         * ->where('website_id = ?', $wId)
         * ->where('customer_group_id = ?', $gId)
         * ->where('product_id IN(?)', $pId);
         * return $adapter->fetchPairs($select);
         * the pair is 'product entity id' => 'price from rule table'
         * we return the price as a float string
         */
        /**
         * From Jordan:
         * PRICE_GROUP:
         * NULL = indicates a standard dealer account. They get the percent
         * discount from attribute 'discount_percent'. These customer do not see
         * Garage Series or ShelterTech Series at all.
         *
         * Exclusive = indicates an exclusive dealer that has access to the full
         * Garage Series SKUs and 20% discount on ShelterTech series items.
         * These customers see all products. They get a discount on the Garage
         * Series based on the 'discount_percent' attribute. But only every get 20%
         * off the ShelterTech series.
         *
         *
         * DISCOUNT_PERCENT:
         * This is the field in the customer_discount table that actually tells
         * us the percent discount. Once we have that, then we calculate the
         * discount as:
         * ((100 - DISCOUNT_PERCENT)/100) * UNIT_PRICE = Customer's discount price
         * to be displayed on the front-end.
         */

        $fpg = explode(',', Mage::getStoreConfig('aevisual/restricted_products/fixed_discount_groups'));
        if (in_array($customer->getGroupId(),$fpg) === true ) {
            $ids = array_filter(explode(',',Mage::getStoreConfig('aevisual/restricted_products/entity_ids')));
            $found = false;
            $searchId = $product->getId();
            if($spid !== null) {
                $searchId = $spid;
            }
            if(in_array($searchId, $ids) === true) {
                $found = true;
            }
            if ($found) {
                return $product->getPrice() * ((100 - Mage::getStoreConfig('aevisual/restricted_products/fixed_discount_amount'))/100);
            }
        }
        if($customer->hasDiscountPercent()) {
            return $product->getPrice() * ((100 - $customer->getDiscountPercent()) / 100);
        }

        return $product->getPrice();
    }

}