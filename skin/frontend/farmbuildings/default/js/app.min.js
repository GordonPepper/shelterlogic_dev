jQuery.fn.centerCenter = function() {
    return jQuery(this).length <= 0 ? !1 : void jQuery(this).each(function() {
        var hWide = $(this).outerWidth() / 2, hTall = $(this).outerHeight() / 2;
        hWide = "-" + hWide + "px", hTall = "-" + hTall + "px", $(this).css({
            "margin-left": hWide,
            "margin-top": hTall
        });
    });
}, jQuery.fn.centerVertical = function() {
    return jQuery(this).length <= 0 ? !1 : void jQuery(this).each(function() {
        var hTall = $(this).height() / 2;
        hTall = "-" + hTall + "px", $(this).css({
            "margin-top": hTall
        });
    });
}, jQuery.fn.centerHorizontal = function() {
    return jQuery(this).length <= 0 ? !1 : void jQuery(this).each(function() {
        var hWide = $(this).width() / 2;
        hWide = "-" + hWide + "px", $(this).css({
            "margin-left": hWide
        });
    });
}, navigator.sayswho = function() {
    var tem, ua = navigator.userAgent, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    return /trident/i.test(M[1]) ? (tem = /\brv[ :]+(\d+)/g.exec(ua) || [], "IE " + (tem[1] || "")) : "Chrome" === M[1] && (tem = ua.match(/\bOPR\/(\d+)/), 
    null != tem) ? "Opera " + tem[1] : (M = M[2] ? [ M[1], M[2] ] : [ navigator.appName, navigator.appVersion, "-?" ], 
    null != (tem = ua.match(/version\/(\d+)/i)) && M.splice(1, 1, tem[1]), M.join(" "));
}();

var MobileEsp = {
    initCompleted: !1,
    isWebkit: !1,
    isMobilePhone: !1,
    isIphone: !1,
    isAndroid: !1,
    isAndroidPhone: !1,
    isTierTablet: !1,
    isTierIphone: !1,
    isTierRichCss: !1,
    isTierGenericMobile: !1,
    engineWebKit: "webkit",
    deviceIphone: "iphone",
    deviceIpod: "ipod",
    deviceIpad: "ipad",
    deviceMacPpc: "macintosh",
    deviceAndroid: "android",
    deviceGoogleTV: "googletv",
    deviceHtcFlyer: "htc_flyer",
    deviceWinPhone7: "windows phone os 7",
    deviceWinPhone8: "windows phone 8",
    deviceWinMob: "windows ce",
    deviceWindows: "windows",
    deviceIeMob: "iemobile",
    devicePpc: "ppc",
    enginePie: "wm5 pie",
    deviceBB: "blackberry",
    deviceBB10: "bb10",
    vndRIM: "vnd.rim",
    deviceBBStorm: "blackberry95",
    deviceBBBold: "blackberry97",
    deviceBBBoldTouch: "blackberry 99",
    deviceBBTour: "blackberry96",
    deviceBBCurve: "blackberry89",
    deviceBBCurveTouch: "blackberry 938",
    deviceBBTorch: "blackberry 98",
    deviceBBPlaybook: "playbook",
    deviceSymbian: "symbian",
    deviceSymbos: "symbos",
    deviceS60: "series60",
    deviceS70: "series70",
    deviceS80: "series80",
    deviceS90: "series90",
    devicePalm: "palm",
    deviceWebOS: "webos",
    deviceWebOShp: "hpwos",
    engineBlazer: "blazer",
    engineXiino: "xiino",
    deviceNuvifone: "nuvifone",
    deviceBada: "bada",
    deviceTizen: "tizen",
    deviceMeego: "meego",
    deviceKindle: "kindle",
    engineSilk: "silk-accelerated",
    vndwap: "vnd.wap",
    wml: "wml",
    deviceTablet: "tablet",
    deviceBrew: "brew",
    deviceDanger: "danger",
    deviceHiptop: "hiptop",
    devicePlaystation: "playstation",
    devicePlaystationVita: "vita",
    deviceNintendoDs: "nitro",
    deviceNintendo: "nintendo",
    deviceWii: "wii",
    deviceXbox: "xbox",
    deviceArchos: "archos",
    engineOpera: "opera",
    engineNetfront: "netfront",
    engineUpBrowser: "up.browser",
    engineOpenWeb: "openweb",
    deviceMidp: "midp",
    uplink: "up.link",
    engineTelecaQ: "teleca q",
    engineObigo: "obigo",
    devicePda: "pda",
    mini: "mini",
    mobile: "mobile",
    mobi: "mobi",
    maemo: "maemo",
    linux: "linux",
    mylocom2: "sony/com",
    manuSonyEricsson: "sonyericsson",
    manuericsson: "ericsson",
    manuSamsung1: "sec-sgh",
    manuSony: "sony",
    manuHtc: "htc",
    svcDocomo: "docomo",
    svcKddi: "kddi",
    svcVodafone: "vodafone",
    disUpdate: "update",
    uagent: "",
    InitDeviceScan: function() {
        this.initCompleted = !1, navigator && navigator.userAgent && (this.uagent = navigator.userAgent.toLowerCase()), 
        this.isWebkit = this.DetectWebkit(), this.isIphone = this.DetectIphone(), this.isAndroid = this.DetectAndroid(), 
        this.isAndroidPhone = this.DetectAndroidPhone(), this.isTierIphone = this.DetectTierIphone(), 
        this.isTierTablet = this.DetectTierTablet(), this.isMobilePhone = this.DetectMobileQuick(), 
        this.isTierRichCss = this.DetectTierRichCss(), this.isTierGenericMobile = this.DetectTierOtherPhones(), 
        this.initCompleted = !0;
    },
    DetectIphone: function() {
        return this.initCompleted || this.isIphone ? this.isIphone : this.uagent.search(this.deviceIphone) > -1 ? this.DetectIpad() || this.DetectIpod() ? !1 : !0 : !1;
    },
    DetectIpod: function() {
        return this.uagent.search(this.deviceIpod) > -1 ? !0 : !1;
    },
    DetectIphoneOrIpod: function() {
        return this.DetectIphone() || this.DetectIpod() ? !0 : !1;
    },
    DetectIpad: function() {
        return this.uagent.search(this.deviceIpad) > -1 && this.DetectWebkit() ? !0 : !1;
    },
    DetectIos: function() {
        return this.DetectIphoneOrIpod() || this.DetectIpad() ? !0 : !1;
    },
    DetectAndroid: function() {
        return this.initCompleted || this.isAndroid ? this.isAndroid : this.uagent.search(this.deviceAndroid) > -1 || this.DetectGoogleTV() ? !0 : this.uagent.search(this.deviceHtcFlyer) > -1 ? !0 : !1;
    },
    DetectAndroidPhone: function() {
        return this.initCompleted || this.isAndroidPhone ? this.isAndroidPhone : this.DetectAndroid() && this.uagent.search(this.mobile) > -1 ? !0 : this.DetectOperaAndroidPhone() ? !0 : this.uagent.search(this.deviceHtcFlyer) > -1 ? !0 : !1;
    },
    DetectAndroidTablet: function() {
        return this.DetectAndroid() ? this.DetectOperaMobile() ? !1 : this.uagent.search(this.deviceHtcFlyer) > -1 ? !1 : this.uagent.search(this.mobile) > -1 ? !1 : !0 : !1;
    },
    DetectAndroidWebKit: function() {
        return this.DetectAndroid() && this.DetectWebkit() ? !0 : !1;
    },
    DetectGoogleTV: function() {
        return this.uagent.search(this.deviceGoogleTV) > -1 ? !0 : !1;
    },
    DetectWebkit: function() {
        return this.initCompleted || this.isWebkit ? this.isWebkit : this.uagent.search(this.engineWebKit) > -1 ? !0 : !1;
    },
    DetectWindowsPhone: function() {
        return this.DetectWindowsPhone7() || this.DetectWindowsPhone8() ? !0 : !1;
    },
    DetectWindowsPhone7: function() {
        return this.uagent.search(this.deviceWinPhone7) > -1 ? !0 : !1;
    },
    DetectWindowsPhone8: function() {
        return this.uagent.search(this.deviceWinPhone8) > -1 ? !0 : !1;
    },
    DetectWindowsMobile: function() {
        return this.DetectWindowsPhone() ? !1 : this.uagent.search(this.deviceWinMob) > -1 || this.uagent.search(this.deviceIeMob) > -1 || this.uagent.search(this.enginePie) > -1 ? !0 : this.uagent.search(this.devicePpc) > -1 && !(this.uagent.search(this.deviceMacPpc) > -1) ? !0 : this.uagent.search(this.manuHtc) > -1 && this.uagent.search(this.deviceWindows) > -1 ? !0 : !1;
    },
    DetectBlackBerry: function() {
        return this.uagent.search(this.deviceBB) > -1 || this.uagent.search(this.vndRIM) > -1 ? !0 : this.DetectBlackBerry10Phone() ? !0 : !1;
    },
    DetectBlackBerry10Phone: function() {
        return this.uagent.search(this.deviceBB10) > -1 && this.uagent.search(this.mobile) > -1 ? !0 : !1;
    },
    DetectBlackBerryTablet: function() {
        return this.uagent.search(this.deviceBBPlaybook) > -1 ? !0 : !1;
    },
    DetectBlackBerryWebKit: function() {
        return this.DetectBlackBerry() && this.uagent.search(this.engineWebKit) > -1 ? !0 : !1;
    },
    DetectBlackBerryTouch: function() {
        return this.DetectBlackBerry() && (this.uagent.search(this.deviceBBStorm) > -1 || this.uagent.search(this.deviceBBTorch) > -1 || this.uagent.search(this.deviceBBBoldTouch) > -1 || this.uagent.search(this.deviceBBCurveTouch) > -1) ? !0 : !1;
    },
    DetectBlackBerryHigh: function() {
        return this.DetectBlackBerryWebKit() ? !1 : this.DetectBlackBerry() && (this.DetectBlackBerryTouch() || this.uagent.search(this.deviceBBBold) > -1 || this.uagent.search(this.deviceBBTour) > -1 || this.uagent.search(this.deviceBBCurve) > -1) ? !0 : !1;
    },
    DetectBlackBerryLow: function() {
        return this.DetectBlackBerry() ? this.DetectBlackBerryHigh() || this.DetectBlackBerryWebKit() ? !1 : !0 : !1;
    },
    DetectS60OssBrowser: function() {
        return this.DetectWebkit() && (this.uagent.search(this.deviceS60) > -1 || this.uagent.search(this.deviceSymbian) > -1) ? !0 : !1;
    },
    DetectSymbianOS: function() {
        return this.uagent.search(this.deviceSymbian) > -1 || this.uagent.search(this.deviceS60) > -1 || this.uagent.search(this.deviceSymbos) > -1 && this.DetectOperaMobile || this.uagent.search(this.deviceS70) > -1 || this.uagent.search(this.deviceS80) > -1 || this.uagent.search(this.deviceS90) > -1 ? !0 : !1;
    },
    DetectPalmOS: function() {
        return this.DetectPalmWebOS() ? !1 : this.uagent.search(this.devicePalm) > -1 || this.uagent.search(this.engineBlazer) > -1 || this.uagent.search(this.engineXiino) > -1 ? !0 : !1;
    },
    DetectPalmWebOS: function() {
        return this.uagent.search(this.deviceWebOS) > -1 ? !0 : !1;
    },
    DetectWebOSTablet: function() {
        return this.uagent.search(this.deviceWebOShp) > -1 && this.uagent.search(this.deviceTablet) > -1 ? !0 : !1;
    },
    DetectOperaMobile: function() {
        return this.uagent.search(this.engineOpera) > -1 && (this.uagent.search(this.mini) > -1 || this.uagent.search(this.mobi) > -1) ? !0 : !1;
    },
    DetectOperaAndroidPhone: function() {
        return this.uagent.search(this.engineOpera) > -1 && this.uagent.search(this.deviceAndroid) > -1 && this.uagent.search(this.mobi) > -1 ? !0 : !1;
    },
    DetectOperaAndroidTablet: function() {
        return this.uagent.search(this.engineOpera) > -1 && this.uagent.search(this.deviceAndroid) > -1 && this.uagent.search(this.deviceTablet) > -1 ? !0 : !1;
    },
    DetectKindle: function() {
        return this.uagent.search(this.deviceKindle) > -1 && !this.DetectAndroid() ? !0 : !1;
    },
    DetectAmazonSilk: function() {
        return this.uagent.search(this.engineSilk) > -1 ? !0 : !1;
    },
    DetectGarminNuvifone: function() {
        return this.uagent.search(this.deviceNuvifone) > -1 ? !0 : !1;
    },
    DetectBada: function() {
        return this.uagent.search(this.deviceBada) > -1 ? !0 : !1;
    },
    DetectTizen: function() {
        return this.uagent.search(this.deviceTizen) > -1 ? !0 : !1;
    },
    DetectMeego: function() {
        return this.uagent.search(this.deviceMeego) > -1 ? !0 : !1;
    },
    DetectDangerHiptop: function() {
        return this.uagent.search(this.deviceDanger) > -1 || this.uagent.search(this.deviceHiptop) > -1 ? !0 : !1;
    },
    DetectSonyMylo: function() {
        return this.uagent.search(this.manuSony) > -1 && (this.uagent.search(this.qtembedded) > -1 || this.uagent.search(this.mylocom2) > -1) ? !0 : !1;
    },
    DetectMaemoTablet: function() {
        return this.uagent.search(this.maemo) > -1 ? !0 : this.uagent.search(this.linux) > -1 && this.uagent.search(this.deviceTablet) > -1 && !this.DetectWebOSTablet() && !this.DetectAndroid() ? !0 : !1;
    },
    DetectArchos: function() {
        return this.uagent.search(this.deviceArchos) > -1 ? !0 : !1;
    },
    DetectGameConsole: function() {
        return this.DetectSonyPlaystation() || this.DetectNintendo() || this.DetectXbox() ? !0 : !1;
    },
    DetectSonyPlaystation: function() {
        return this.uagent.search(this.devicePlaystation) > -1 ? !0 : !1;
    },
    DetectGamingHandheld: function() {
        return this.uagent.search(this.devicePlaystation) > -1 && this.uagent.search(this.devicePlaystationVita) > -1 ? !0 : !1;
    },
    DetectNintendo: function() {
        return this.uagent.search(this.deviceNintendo) > -1 || this.uagent.search(this.deviceWii) > -1 || this.uagent.search(this.deviceNintendoDs) > -1 ? !0 : !1;
    },
    DetectXbox: function() {
        return this.uagent.search(this.deviceXbox) > -1 ? !0 : !1;
    },
    DetectBrewDevice: function() {
        return this.uagent.search(this.deviceBrew) > -1 ? !0 : !1;
    },
    DetectSmartphone: function() {
        return this.DetectTierIphone() || this.DetectS60OssBrowser() || this.DetectSymbianOS() || this.DetectWindowsMobile() || this.DetectBlackBerry() || this.DetectPalmOS() ? !0 : !1;
    },
    DetectMobileQuick: function() {
        return this.DetectTierTablet() ? !1 : this.initCompleted || this.isMobilePhone ? this.isMobilePhone : this.DetectSmartphone() ? !0 : this.uagent.search(this.mobile) > -1 ? !0 : this.DetectKindle() || this.DetectAmazonSilk() ? !0 : this.uagent.search(this.deviceMidp) > -1 || this.DetectBrewDevice() ? !0 : this.DetectOperaMobile() || this.DetectArchos() ? !0 : this.uagent.search(this.engineObigo) > -1 || this.uagent.search(this.engineNetfront) > -1 || this.uagent.search(this.engineUpBrowser) > -1 || this.uagent.search(this.engineOpenWeb) > -1 ? !0 : !1;
    },
    DetectMobileLong: function() {
        return this.DetectMobileQuick() ? !0 : this.DetectGameConsole() ? !0 : this.DetectDangerHiptop() || this.DetectMaemoTablet() || this.DetectSonyMylo() || this.DetectGarminNuvifone() ? !0 : this.uagent.search(this.devicePda) > -1 && !(this.uagent.search(this.disUpdate) > -1) ? !0 : this.uagent.search(this.manuSamsung1) > -1 || this.uagent.search(this.manuSonyEricsson) > -1 || this.uagent.search(this.manuericsson) > -1 ? !0 : this.uagent.search(this.svcDocomo) > -1 || this.uagent.search(this.svcKddi) > -1 || this.uagent.search(this.svcVodafone) > -1 ? !0 : !1;
    },
    DetectTierTablet: function() {
        return this.initCompleted || this.isTierTablet ? this.isTierTablet : this.DetectIpad() || this.DetectAndroidTablet() || this.DetectBlackBerryTablet() || this.DetectWebOSTablet() ? !0 : !1;
    },
    DetectTierIphone: function() {
        return this.initCompleted || this.isTierIphone ? this.isTierIphone : this.DetectIphoneOrIpod() || this.DetectAndroidPhone() || this.DetectWindowsPhone() || this.DetectBlackBerry10Phone() || this.DetectPalmWebOS() || this.DetectBada() || this.DetectTizen() || this.DetectGamingHandheld() ? !0 : this.DetectBlackBerryWebKit() && this.DetectBlackBerryTouch() ? !0 : !1;
    },
    DetectTierRichCss: function() {
        return this.initCompleted || this.isTierRichCss ? this.isTierRichCss : this.DetectTierIphone() || this.DetectKindle() || this.DetectTierTablet() ? !1 : this.DetectMobileQuick() ? this.DetectWebkit() ? !0 : this.DetectS60OssBrowser() || this.DetectBlackBerryHigh() || this.DetectWindowsMobile() || this.uagent.search(this.engineTelecaQ) > -1 ? !0 : !1 : !1;
    },
    DetectTierOtherPhones: function() {
        return this.initCompleted || this.isTierGenericMobile ? this.isTierGenericMobile : this.DetectTierIphone() || this.DetectTierRichCss() || this.DetectTierTablet() ? !1 : this.DetectMobileLong() ? !0 : !1;
    }
};

MobileEsp.InitDeviceScan();

var isMobile = {
    Android: function() {
        return navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function() {
        return navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function() {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function() {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function() {
        return navigator.userAgent.match(/IEMobile/i);
    },
    any: function() {
        return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();
    }
};

!function($) {
    function isInputEventSupported(eventName) {
        var el = document.createElement("input"), evName = "on" + eventName, isSupported = evName in el;
        return isSupported || (el.setAttribute(evName, "return;"), isSupported = "function" == typeof el[evName]), 
        el = null, isSupported;
    }
    function isInputTypeSupported(inputType) {
        var isSupported = "text" == inputType || "tel" == inputType;
        if (!isSupported) {
            var el = document.createElement("input");
            el.setAttribute("type", inputType), isSupported = "text" === el.type, el = null;
        }
        return isSupported;
    }
    function resolveAlias(aliasStr, options, opts) {
        var aliasDefinition = opts.aliases[aliasStr];
        return aliasDefinition ? (aliasDefinition.alias && resolveAlias(aliasDefinition.alias, void 0, opts), 
        $.extend(!0, opts, aliasDefinition), $.extend(!0, opts, options), !0) : !1;
    }
    function generateMaskSet(opts, multi) {
        function analyseMask(mask) {
            function maskToken(isGroup, isOptional, isQuantifier, isAlternator) {
                this.matches = [], this.isGroup = isGroup || !1, this.isOptional = isOptional || !1, 
                this.isQuantifier = isQuantifier || !1, this.isAlternator = isAlternator || !1, 
                this.quantifier = {
                    min: 1,
                    max: 1
                };
            }
            function insertTestDefinition(mtoken, element, position) {
                var maskdef = opts.definitions[element], newBlockMarker = 0 == mtoken.matches.length;
                if (position = void 0 != position ? position : mtoken.matches.length, maskdef && !escaped) {
                    maskdef.placeholder = $.isFunction(maskdef.placeholder) ? maskdef.placeholder.call(this, opts) : maskdef.placeholder;
                    for (var prevalidators = maskdef.prevalidator, prevalidatorsL = prevalidators ? prevalidators.length : 0, i = 1; i < maskdef.cardinality; i++) {
                        var prevalidator = prevalidatorsL >= i ? prevalidators[i - 1] : [], validator = prevalidator.validator, cardinality = prevalidator.cardinality;
                        mtoken.matches.splice(position++, 0, {
                            fn: validator ? "string" == typeof validator ? new RegExp(validator) : new function() {
                                this.test = validator;
                            }() : new RegExp("."),
                            cardinality: cardinality ? cardinality : 1,
                            optionality: mtoken.isOptional,
                            newBlockMarker: newBlockMarker,
                            casing: maskdef.casing,
                            def: maskdef.definitionSymbol || element,
                            placeholder: maskdef.placeholder,
                            mask: element
                        });
                    }
                    mtoken.matches.splice(position++, 0, {
                        fn: maskdef.validator ? "string" == typeof maskdef.validator ? new RegExp(maskdef.validator) : new function() {
                            this.test = maskdef.validator;
                        }() : new RegExp("."),
                        cardinality: maskdef.cardinality,
                        optionality: mtoken.isOptional,
                        newBlockMarker: newBlockMarker,
                        casing: maskdef.casing,
                        def: maskdef.definitionSymbol || element,
                        placeholder: maskdef.placeholder,
                        mask: element
                    });
                } else mtoken.matches.splice(position++, 0, {
                    fn: null,
                    cardinality: 0,
                    optionality: mtoken.isOptional,
                    newBlockMarker: newBlockMarker,
                    casing: null,
                    def: element,
                    placeholder: void 0,
                    mask: element
                }), escaped = !1;
            }
            for (var match, m, openingToken, currentOpeningToken, alternator, lastMatch, tokenizer = /(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})\??|[^.?*+^${[]()|\\]+|./g, escaped = !1, currentToken = new maskToken(), openenings = [], maskTokens = []; match = tokenizer.exec(mask); ) switch (m = match[0], 
            m.charAt(0)) {
              case opts.optionalmarker.end:
              case opts.groupmarker.end:
                if (openingToken = openenings.pop(), openenings.length > 0) {
                    if (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(openingToken), 
                    currentOpeningToken.isAlternator) {
                        alternator = openenings.pop();
                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup = !1;
                        openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], 
                        currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
                    }
                } else currentToken.matches.push(openingToken);
                break;

              case opts.optionalmarker.start:
                openenings.push(new maskToken(!1, !0));
                break;

              case opts.groupmarker.start:
                openenings.push(new maskToken(!0));
                break;

              case opts.quantifiermarker.start:
                var quantifier = new maskToken(!1, !1, !0);
                m = m.replace(/[{}]/g, "");
                var mq = m.split(","), mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]), mq1 = 1 == mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);
                if (("*" == mq1 || "+" == mq1) && (mq0 = "*" == mq1 ? 0 : 1), quantifier.quantifier = {
                    min: mq0,
                    max: mq1
                }, openenings.length > 0) {
                    var matches = openenings[openenings.length - 1].matches;
                    if (match = matches.pop(), !match.isGroup) {
                        var groupToken = new maskToken(!0);
                        groupToken.matches.push(match), match = groupToken;
                    }
                    matches.push(match), matches.push(quantifier);
                } else {
                    if (match = currentToken.matches.pop(), !match.isGroup) {
                        var groupToken = new maskToken(!0);
                        groupToken.matches.push(match), match = groupToken;
                    }
                    currentToken.matches.push(match), currentToken.matches.push(quantifier);
                }
                break;

              case opts.escapeChar:
                escaped = !0;
                break;

              case opts.alternatormarker:
                openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], 
                lastMatch = currentOpeningToken.matches.pop()) : lastMatch = currentToken.matches.pop(), 
                lastMatch.isAlternator ? openenings.push(lastMatch) : (alternator = new maskToken(!1, !1, !1, !0), 
                alternator.matches.push(lastMatch), openenings.push(alternator));
                break;

              default:
                if (openenings.length > 0) {
                    if (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.length > 0 && (lastMatch = currentOpeningToken.matches[currentOpeningToken.matches.length - 1], 
                    lastMatch.isGroup && (lastMatch.isGroup = !1, insertTestDefinition(lastMatch, opts.groupmarker.start, 0), 
                    insertTestDefinition(lastMatch, opts.groupmarker.end))), insertTestDefinition(currentOpeningToken, m), 
                    currentOpeningToken.isAlternator) {
                        alternator = openenings.pop();
                        for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup = !1;
                        openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], 
                        currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
                    }
                } else currentToken.matches.length > 0 && (lastMatch = currentToken.matches[currentToken.matches.length - 1], 
                lastMatch.isGroup && (lastMatch.isGroup = !1, insertTestDefinition(lastMatch, opts.groupmarker.start, 0), 
                insertTestDefinition(lastMatch, opts.groupmarker.end))), insertTestDefinition(currentToken, m);
            }
            return currentToken.matches.length > 0 && (lastMatch = currentToken.matches[currentToken.matches.length - 1], 
            lastMatch.isGroup && (lastMatch.isGroup = !1, insertTestDefinition(lastMatch, opts.groupmarker.start, 0), 
            insertTestDefinition(lastMatch, opts.groupmarker.end)), maskTokens.push(currentToken)), 
            maskTokens;
        }
        function generateMask(mask, metadata) {
            if (opts.numericInput && opts.multi !== !0) {
                mask = mask.split("").reverse();
                for (var ndx = 0; ndx < mask.length; ndx++) mask[ndx] == opts.optionalmarker.start ? mask[ndx] = opts.optionalmarker.end : mask[ndx] == opts.optionalmarker.end ? mask[ndx] = opts.optionalmarker.start : mask[ndx] == opts.groupmarker.start ? mask[ndx] = opts.groupmarker.end : mask[ndx] == opts.groupmarker.end && (mask[ndx] = opts.groupmarker.start);
                mask = mask.join("");
            }
            if (void 0 == mask || "" == mask) return void 0;
            if (1 == mask.length && 0 == opts.greedy && 0 != opts.repeat && (opts.placeholder = ""), 
            opts.repeat > 0 || "*" == opts.repeat || "+" == opts.repeat) {
                var repeatStart = "*" == opts.repeat ? 0 : "+" == opts.repeat ? 1 : opts.repeat;
                mask = opts.groupmarker.start + mask + opts.groupmarker.end + opts.quantifiermarker.start + repeatStart + "," + opts.repeat + opts.quantifiermarker.end;
            }
            return void 0 == $.inputmask.masksCache[mask] && ($.inputmask.masksCache[mask] = {
                mask: mask,
                maskToken: analyseMask(mask),
                validPositions: {},
                _buffer: void 0,
                buffer: void 0,
                tests: {},
                metadata: metadata
            }), $.extend(!0, {}, $.inputmask.masksCache[mask]);
        }
        var ms = void 0;
        if ($.isFunction(opts.mask) && (opts.mask = opts.mask.call(this, opts)), $.isArray(opts.mask)) if (multi) ms = [], 
        $.each(opts.mask, function(ndx, msk) {
            ms.push(void 0 == msk.mask || $.isFunction(msk.mask) ? generateMask(msk.toString(), msk) : generateMask(msk.mask.toString(), msk));
        }); else {
            opts.keepStatic = void 0 == opts.keepStatic ? !0 : opts.keepStatic;
            var altMask = "(";
            $.each(opts.mask, function(ndx, msk) {
                altMask.length > 1 && (altMask += ")|("), altMask += void 0 == msk.mask || $.isFunction(msk.mask) ? msk.toString() : msk.mask.toString();
            }), altMask += ")", ms = generateMask(altMask, opts.mask);
        } else opts.mask && (ms = void 0 == opts.mask.mask || $.isFunction(opts.mask.mask) ? generateMask(opts.mask.toString(), opts.mask) : generateMask(opts.mask.mask.toString(), opts.mask));
        return ms;
    }
    function maskScope(actionObj, maskset, opts) {
        function getMaskTemplate(baseOnInput, minimalPos, includeInput) {
            minimalPos = minimalPos || 0;
            var ndxIntlzr, test, testPos, maskTemplate = [], pos = 0;
            do {
                if (baseOnInput === !0 && getMaskSet().validPositions[pos]) {
                    var validPos = getMaskSet().validPositions[pos];
                    test = validPos.match, ndxIntlzr = validPos.locator.slice(), maskTemplate.push(includeInput === !0 ? validPos.input : getPlaceholder(pos, test));
                } else {
                    if (minimalPos > pos) {
                        var testPositions = getTests(pos, ndxIntlzr, pos - 1);
                        testPos = testPositions[0];
                    } else testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);
                    test = testPos.match, ndxIntlzr = testPos.locator.slice(), maskTemplate.push(getPlaceholder(pos, test));
                }
                pos++;
            } while ((void 0 == maxLength || maxLength > pos - 1) && null != test.fn || null == test.fn && "" != test.def || minimalPos >= pos);
            return maskTemplate.pop(), maskTemplate;
        }
        function getMaskSet() {
            return maskset;
        }
        function resetMaskSet(soft) {
            var maskset = getMaskSet();
            maskset.buffer = void 0, maskset.tests = {}, soft !== !0 && (maskset._buffer = void 0, 
            maskset.validPositions = {}, maskset.p = 0);
        }
        function getLastValidPosition(closestTo) {
            var maskset = getMaskSet(), lastValidPosition = -1, valids = maskset.validPositions;
            void 0 == closestTo && (closestTo = -1);
            var before = lastValidPosition, after = lastValidPosition;
            for (var posNdx in valids) {
                var psNdx = parseInt(posNdx);
                (-1 == closestTo || null != valids[psNdx].match.fn) && (closestTo >= psNdx && (before = psNdx), 
                psNdx >= closestTo && (after = psNdx));
            }
            return lastValidPosition = closestTo - before > 1 || closestTo > after ? before : after;
        }
        function setValidPosition(pos, validTest, fromSetValid) {
            if (opts.insertMode && void 0 != getMaskSet().validPositions[pos] && void 0 == fromSetValid) {
                var i, positionsClone = $.extend(!0, {}, getMaskSet().validPositions), lvp = getLastValidPosition();
                for (i = pos; lvp >= i; i++) delete getMaskSet().validPositions[i];
                getMaskSet().validPositions[pos] = validTest;
                var j, valid = !0;
                for (i = pos; lvp >= i; i++) {
                    var t = positionsClone[i];
                    if (void 0 != t) {
                        var vps = getMaskSet().validPositions;
                        j = !opts.keepStatic && vps[i] && (void 0 != vps[i + 1] && getTests(i + 1, vps[i].locator.slice(), i).length > 1 || void 0 != vps[i].alternation) ? i + 1 : seekNext(i), 
                        valid = positionCanMatchDefinition(j, t.match.def) ? valid && isValid(j, t.input, !0, !0) !== !1 : null == t.match.fn;
                    }
                    if (!valid) break;
                }
                if (!valid) return getMaskSet().validPositions = $.extend(!0, {}, positionsClone), 
                !1;
            } else getMaskSet().validPositions[pos] = validTest;
            return !0;
        }
        function stripValidPositions(start, end) {
            var i, startPos = start;
            for (void 0 != getMaskSet().validPositions[start] && getMaskSet().validPositions[start].input == opts.radixPoint && (end++, 
            startPos++), i = startPos; end > i; i++) void 0 == getMaskSet().validPositions[i] || getMaskSet().validPositions[i].input == opts.radixPoint && i != getLastValidPosition() || delete getMaskSet().validPositions[i];
            for (i = end; i <= getLastValidPosition(); ) {
                var t = getMaskSet().validPositions[i], s = getMaskSet().validPositions[startPos];
                void 0 != t && void 0 == s ? (positionCanMatchDefinition(startPos, t.match.def) && isValid(startPos, t.input, !0) !== !1 && (delete getMaskSet().validPositions[i], 
                i++), startPos++) : i++;
            }
            var lvp = getLastValidPosition();
            lvp >= start && void 0 != getMaskSet().validPositions[lvp] && getMaskSet().validPositions[lvp].input == opts.radixPoint && delete getMaskSet().validPositions[lvp], 
            resetMaskSet(!0);
        }
        function getTestTemplate(pos, ndxIntlzr, tstPs) {
            for (var testPos, testPositions = getTests(pos, ndxIntlzr, tstPs), lvp = getLastValidPosition(), lvTest = getMaskSet().validPositions[lvp] || getTests(0)[0], lvTestAltArr = void 0 != lvTest.alternation ? lvTest.locator[lvTest.alternation].split(",") : [], ndx = 0; ndx < testPositions.length && (testPos = testPositions[ndx], 
            !(opts.greedy || testPos.match && (testPos.match.optionality === !1 || testPos.match.newBlockMarker === !1) && testPos.match.optionalQuantifier !== !0 && (void 0 == lvTest.alternation || void 0 != testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAltArr)))); ndx++) ;
            return testPos;
        }
        function getTest(pos) {
            return getMaskSet().validPositions[pos] ? getMaskSet().validPositions[pos].match : getTests(pos)[0].match;
        }
        function positionCanMatchDefinition(pos, def) {
            for (var valid = !1, tests = getTests(pos), tndx = 0; tndx < tests.length; tndx++) if (tests[tndx].match && tests[tndx].match.def == def) {
                valid = !0;
                break;
            }
            return valid;
        }
        function getTests(pos, ndxIntlzr, tstPs) {
            function ResolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {
                function handleMatch(match, loopNdx, quantifierRecurse) {
                    if (testPos > 1e4) return alert("jquery.inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + getMaskSet().mask), 
                    !0;
                    if (testPos == pos && void 0 == match.matches) return matches.push({
                        match: match,
                        locator: loopNdx.reverse()
                    }), !0;
                    if (void 0 != match.matches) {
                        if (match.isGroup && quantifierRecurse !== !0) {
                            if (match = handleMatch(maskToken.matches[tndx + 1], loopNdx)) return !0;
                        } else if (match.isOptional) {
                            var optionalToken = match;
                            if (match = ResolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) {
                                var latestMatch = matches[matches.length - 1].match, isFirstMatch = 0 == $.inArray(latestMatch, optionalToken.matches);
                                isFirstMatch && (insertStop = !0), testPos = pos;
                            }
                        } else if (match.isAlternator) {
                            var maltMatches, alternateToken = match, malternateMatches = [], currentMatches = matches.slice(), loopNdxCnt = loopNdx.length, altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;
                            if (-1 == altIndex || "string" == typeof altIndex) {
                                var altIndexArr, currentPos = testPos, ndxInitializerClone = ndxInitializer.slice();
                                "string" == typeof altIndex && (altIndexArr = altIndex.split(","));
                                for (var amndx = 0; amndx < alternateToken.matches.length; amndx++) {
                                    matches = [], match = handleMatch(alternateToken.matches[amndx], [ amndx ].concat(loopNdx), quantifierRecurse) || match, 
                                    maltMatches = matches.slice(), testPos = currentPos, matches = [];
                                    for (var i = 0; i < ndxInitializerClone.length; i++) ndxInitializer[i] = ndxInitializerClone[i];
                                    for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) for (var altMatch = maltMatches[ndx1], ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
                                        var altMatch2 = malternateMatches[ndx2];
                                        if (altMatch.match.mask == altMatch2.match.mask && ("string" != typeof altIndex || -1 != $.inArray(altMatch.locator[loopNdxCnt].toString(), altIndexArr))) {
                                            maltMatches.splice(ndx1, 1), altMatch2.locator[loopNdxCnt] = altMatch2.locator[loopNdxCnt] + "," + altMatch.locator[loopNdxCnt], 
                                            altMatch2.alternation = loopNdxCnt;
                                            break;
                                        }
                                    }
                                    malternateMatches = malternateMatches.concat(maltMatches);
                                }
                                "string" == typeof altIndex && (malternateMatches = $.map(malternateMatches, function(lmnt, ndx) {
                                    if (isFinite(ndx)) {
                                        var mamatch, altLocArr = lmnt.locator[loopNdxCnt].toString().split(",");
                                        lmnt.locator[loopNdxCnt] = void 0, lmnt.alternation = void 0;
                                        for (var alndx = 0; alndx < altLocArr.length; alndx++) mamatch = -1 != $.inArray(altLocArr[alndx], altIndexArr), 
                                        mamatch && (void 0 != lmnt.locator[loopNdxCnt] ? (lmnt.locator[loopNdxCnt] += ",", 
                                        lmnt.alternation = loopNdxCnt, lmnt.locator[loopNdxCnt] += altLocArr[alndx]) : lmnt.locator[loopNdxCnt] = parseInt(altLocArr[alndx]));
                                        if (void 0 != lmnt.locator[loopNdxCnt]) return lmnt;
                                    }
                                })), matches = currentMatches.concat(malternateMatches), insertStop = !0;
                            } else match = handleMatch(alternateToken.matches[altIndex], [ altIndex ].concat(loopNdx), quantifierRecurse);
                            if (match) return !0;
                        } else if (match.isQuantifier && quantifierRecurse !== !0) {
                            var qt = match;
                            opts.greedy = opts.greedy && isFinite(qt.quantifier.max);
                            for (var qndx = ndxInitializer.length > 0 && quantifierRecurse !== !0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && pos >= testPos; qndx++) {
                                var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];
                                if (match = handleMatch(tokenGroup, [ qndx ].concat(loopNdx), !0)) {
                                    var latestMatch = matches[matches.length - 1].match;
                                    latestMatch.optionalQuantifier = qndx > qt.quantifier.min - 1;
                                    var isFirstMatch = 0 == $.inArray(latestMatch, tokenGroup.matches);
                                    if (isFirstMatch) {
                                        if (qndx > qt.quantifier.min - 1) {
                                            insertStop = !0, testPos = pos;
                                            break;
                                        }
                                        return !0;
                                    }
                                    return !0;
                                }
                            }
                        } else if (match = ResolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) return !0;
                    } else testPos++;
                }
                for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) if (maskToken.matches[tndx].isQuantifier !== !0) {
                    var match = handleMatch(maskToken.matches[tndx], [ tndx ].concat(loopNdx), quantifierRecurse);
                    if (match && testPos == pos) return match;
                    if (testPos > pos) break;
                }
            }
            var maskTokens = getMaskSet().maskToken, testPos = ndxIntlzr ? tstPs : 0, ndxInitializer = ndxIntlzr || [ 0 ], matches = [], insertStop = !1;
            if (void 0 == ndxIntlzr) {
                for (var test, previousPos = pos - 1; void 0 == (test = getMaskSet().validPositions[previousPos]) && previousPos > -1; ) previousPos--;
                if (void 0 != test && previousPos > -1) testPos = previousPos, ndxInitializer = test.locator.slice(); else {
                    for (previousPos = pos - 1; void 0 == (test = getMaskSet().tests[previousPos]) && previousPos > -1; ) previousPos--;
                    void 0 != test && previousPos > -1 && (testPos = previousPos, ndxInitializer = test[0].locator.slice());
                }
            }
            for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
                var match = ResolveTestFromToken(maskTokens[mtndx], ndxInitializer, [ mtndx ]);
                if (match && testPos == pos || testPos > pos) break;
            }
            return (0 == matches.length || insertStop) && matches.push({
                match: {
                    fn: null,
                    cardinality: 0,
                    optionality: !0,
                    casing: null,
                    def: ""
                },
                locator: []
            }), getMaskSet().tests[pos] = $.extend(!0, [], matches), getMaskSet().tests[pos];
        }
        function getBufferTemplate() {
            return void 0 == getMaskSet()._buffer && (getMaskSet()._buffer = getMaskTemplate(!1, 1)), 
            getMaskSet()._buffer;
        }
        function getBuffer() {
            return void 0 == getMaskSet().buffer && (getMaskSet().buffer = getMaskTemplate(!0, getLastValidPosition(), !0)), 
            getMaskSet().buffer;
        }
        function refreshFromBuffer(start, end, buffer) {
            if (buffer = buffer || getBuffer().slice(), start === !0) resetMaskSet(), start = 0, 
            end = buffer.length; else for (var i = start; end > i; i++) delete getMaskSet().validPositions[i], 
            delete getMaskSet().tests[i];
            for (var i = start; end > i; i++) buffer[i] != opts.skipOptionalPartCharacter && isValid(i, buffer[i], !0, !0);
        }
        function casing(elem, test) {
            switch (test.casing) {
              case "upper":
                elem = elem.toUpperCase();
                break;

              case "lower":
                elem = elem.toLowerCase();
            }
            return elem;
        }
        function checkAlternationMatch(altArr1, altArr2) {
            for (var altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = !1, alndx = 0; alndx < altArr1.length; alndx++) if (-1 != $.inArray(altArr1[alndx], altArrC)) {
                isMatch = !0;
                break;
            }
            return isMatch;
        }
        function isValid(pos, c, strict, fromSetValid) {
            function _isValid(position, c, strict, fromSetValid) {
                var rslt = !1;
                return $.each(getTests(position), function(ndx, tst) {
                    for (var test = tst.match, loopend = c ? 1 : 0, chrs = "", i = (getBuffer(), test.cardinality); i > loopend; i--) chrs += getBufferElement(position - (i - 1));
                    if (c && (chrs += c), rslt = null != test.fn ? test.fn.test(chrs, getMaskSet(), position, strict, opts) : c != test.def && c != opts.skipOptionalPartCharacter || "" == test.def ? !1 : {
                        c: test.def,
                        pos: position
                    }, rslt !== !1) {
                        var elem = void 0 != rslt.c ? rslt.c : c;
                        elem = elem == opts.skipOptionalPartCharacter && null === test.fn ? test.def : elem;
                        var validatedPos = position;
                        if (void 0 != rslt.remove && stripValidPositions(rslt.remove, rslt.remove + 1), 
                        rslt.refreshFromBuffer) {
                            var refresh = rslt.refreshFromBuffer;
                            if (strict = !0, refreshFromBuffer(refresh === !0 ? refresh : refresh.start, refresh.end), 
                            void 0 == rslt.pos && void 0 == rslt.c) return rslt.pos = getLastValidPosition(), 
                            !1;
                            if (validatedPos = void 0 != rslt.pos ? rslt.pos : position, validatedPos != position) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0)), 
                            !1;
                        } else if (rslt !== !0 && void 0 != rslt.pos && rslt.pos != position && (validatedPos = rslt.pos, 
                        refreshFromBuffer(position, validatedPos), validatedPos != position)) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0)), 
                        !1;
                        return 1 != rslt && void 0 == rslt.pos && void 0 == rslt.c ? !1 : (ndx > 0 && resetMaskSet(!0), 
                        setValidPosition(validatedPos, $.extend({}, tst, {
                            input: casing(elem, test)
                        }), fromSetValid) || (rslt = !1), !1);
                    }
                }), rslt;
            }
            function alternate(pos, c, strict, fromSetValid) {
                var lastAlt, alternation, validPsClone = $.extend(!0, {}, getMaskSet().validPositions);
                for (lastAlt = getLastValidPosition(); lastAlt >= 0; lastAlt--) if (getMaskSet().validPositions[lastAlt] && void 0 != getMaskSet().validPositions[lastAlt].alternation) {
                    alternation = getMaskSet().validPositions[lastAlt].alternation;
                    break;
                }
                if (void 0 != alternation) for (var decisionPos in getMaskSet().validPositions) if (parseInt(decisionPos) > parseInt(lastAlt) && void 0 === getMaskSet().validPositions[decisionPos].alternation) {
                    for (var altPos = getMaskSet().validPositions[decisionPos], decisionTaker = altPos.locator[alternation], altNdxs = getMaskSet().validPositions[lastAlt].locator[alternation].split(","), mndx = 0; mndx < altNdxs.length; mndx++) if (decisionTaker < altNdxs[mndx]) {
                        for (var possibilityPos, possibilities, dp = decisionPos - 1; dp >= 0; dp--) if (possibilityPos = getMaskSet().validPositions[dp], 
                        void 0 != possibilityPos) {
                            possibilities = possibilityPos.locator[alternation], possibilityPos.locator[alternation] = altNdxs[mndx];
                            break;
                        }
                        if (decisionTaker != possibilityPos.locator[alternation]) {
                            for (var buffer = getBuffer().slice(), i = decisionPos; i < getLastValidPosition() + 1; i++) delete getMaskSet().validPositions[i], 
                            delete getMaskSet().tests[i];
                            resetMaskSet(!0), opts.keepStatic = !opts.keepStatic;
                            for (var i = decisionPos; i < buffer.length; i++) buffer[i] != opts.skipOptionalPartCharacter && isValid(getLastValidPosition() + 1, buffer[i], !1, !0);
                            possibilityPos.locator[alternation] = possibilities;
                            var isValidRslt = isValid(pos, c, strict, fromSetValid);
                            if (opts.keepStatic = !opts.keepStatic, isValidRslt) return isValidRslt;
                            resetMaskSet(), getMaskSet().validPositions = $.extend(!0, {}, validPsClone);
                        }
                    }
                    break;
                }
                return !1;
            }
            function trackbackAlternations(originalPos, newPos) {
                for (var vp = getMaskSet().validPositions[newPos], targetLocator = vp.locator, tll = targetLocator.length, ps = originalPos; newPos > ps; ps++) if (!isMask(ps)) {
                    var tests = getTests(ps), bestMatch = tests[0], equality = -1;
                    $.each(tests, function(ndx, tst) {
                        for (var i = 0; tll > i; i++) tst.locator[i] && checkAlternationMatch(tst.locator[i].toString().split(","), targetLocator[i].toString().split(",")) && i > equality && (equality = i, 
                        bestMatch = tst);
                    }), setValidPosition(ps, $.extend({}, bestMatch, {
                        input: bestMatch.match.def
                    }), !0);
                }
            }
            strict = strict === !0;
            for (var buffer = getBuffer(), pndx = pos - 1; pndx > -1 && (!getMaskSet().validPositions[pndx] || null != getMaskSet().validPositions[pndx].match.fn); pndx--) void 0 == getMaskSet().validPositions[pndx] && (!isMask(pndx) || buffer[pndx] != getPlaceholder(pndx)) && getTests(pndx).length > 1 && _isValid(pndx, buffer[pndx], !0);
            var maskPos = pos, result = !1;
            if (fromSetValid && maskPos >= getMaskLength() && resetMaskSet(!0), maskPos < getMaskLength() && (result = _isValid(maskPos, c, strict, fromSetValid), 
            !strict && result === !1)) {
                var currentPosValid = getMaskSet().validPositions[maskPos];
                if (!currentPosValid || null != currentPosValid.match.fn || currentPosValid.match.def != c && c != opts.skipOptionalPartCharacter) {
                    if ((opts.insertMode || void 0 == getMaskSet().validPositions[seekNext(maskPos)]) && !isMask(maskPos)) for (var nPos = maskPos + 1, snPos = seekNext(maskPos); snPos >= nPos; nPos++) if (result = _isValid(nPos, c, strict, fromSetValid), 
                    result !== !1) {
                        trackbackAlternations(maskPos, nPos), maskPos = nPos;
                        break;
                    }
                } else result = {
                    caret: seekNext(maskPos)
                };
            }
            return result === !1 && opts.keepStatic && isComplete(buffer) && (result = alternate(pos, c, strict, fromSetValid)), 
            result === !0 && (result = {
                pos: maskPos
            }), result;
        }
        function isMask(pos) {
            var test = getTest(pos);
            return null != test.fn ? test.fn : !1;
        }
        function getMaskLength() {
            var maskLength;
            if (maxLength = $el.prop("maxLength"), -1 == maxLength && (maxLength = void 0), 
            0 == opts.greedy) {
                var pos, lvp = getLastValidPosition(), testPos = getMaskSet().validPositions[lvp], ndxIntlzr = void 0 != testPos ? testPos.locator.slice() : void 0;
                for (pos = lvp + 1; void 0 == testPos || null != testPos.match.fn || null == testPos.match.fn && "" != testPos.match.def; pos++) testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), 
                ndxIntlzr = testPos.locator.slice();
                maskLength = pos;
            } else maskLength = getBuffer().length;
            return void 0 == maxLength || maxLength > maskLength ? maskLength : maxLength;
        }
        function seekNext(pos) {
            var maskL = getMaskLength();
            if (pos >= maskL) return maskL;
            for (var position = pos; ++position < maskL && !isMask(position) && (opts.nojumps !== !0 || opts.nojumpsThreshold > position); ) ;
            return position;
        }
        function seekPrevious(pos) {
            var position = pos;
            if (0 >= position) return 0;
            for (;--position > 0 && !isMask(position); ) ;
            return position;
        }
        function getBufferElement(position) {
            return void 0 == getMaskSet().validPositions[position] ? getPlaceholder(position) : getMaskSet().validPositions[position].input;
        }
        function writeBuffer(input, buffer, caretPos) {
            input._valueSet(buffer.join("")), void 0 != caretPos && caret(input, caretPos);
        }
        function getPlaceholder(pos, test) {
            return test = test || getTest(pos), void 0 != test.placeholder ? test.placeholder : null == test.fn ? test.def : opts.placeholder.charAt(pos % opts.placeholder.length);
        }
        function checkVal(input, writeOut, strict, nptvl) {
            var inputValue = void 0 != nptvl ? nptvl.slice() : input._valueGet().split("");
            resetMaskSet(), writeOut && input._valueSet("");
            var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(""), matches = inputValue.join("").match(new RegExp(escapeRegex(staticInput), "g"));
            if (matches && matches.length > 1 && inputValue.splice(0, staticInput.length), $.each(inputValue, function(ndx, charCode) {
                var lvp = getLastValidPosition(), lvTest = getMaskSet().validPositions[lvp], nextTest = getTestTemplate(lvp + 1, lvTest ? lvTest.locator.slice() : void 0, lvp);
                if (-1 == $.inArray(charCode, getBufferTemplate().slice(lvp + 1, getMaskSet().p)) || strict) {
                    var pos = strict ? ndx : null == nextTest.match.fn ? lvp + 1 : getMaskSet().p;
                    keypressEvent.call(input, void 0, !0, charCode.charCodeAt(0), !1, strict, pos), 
                    strict = strict || ndx > 0 && ndx > getMaskSet().p;
                } else keypressEvent.call(input, void 0, !0, charCode.charCodeAt(0), !1, !0, lvp + 1);
            }), writeOut) {
                var keypressResult = opts.onKeyPress.call(this, void 0, getBuffer(), 0, opts);
                handleOnKeyResult(input, keypressResult), writeBuffer(input, getBuffer(), $(input).is(":focus") ? seekNext(getLastValidPosition(0)) : void 0);
            }
        }
        function escapeRegex(str) {
            return $.inputmask.escapeRegex.call(this, str);
        }
        function unmaskedvalue($input) {
            if ($input.data("_inputmask") && !$input.hasClass("hasDatepicker")) {
                var umValue = [], vps = getMaskSet().validPositions;
                for (var pndx in vps) vps[pndx].match && null != vps[pndx].match.fn && umValue.push(vps[pndx].input);
                var unmaskedValue = (isRTL ? umValue.reverse() : umValue).join(""), bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join("");
                return $.isFunction(opts.onUnMask) && (unmaskedValue = opts.onUnMask.call($input, bufferValue, unmaskedValue, opts) || unmaskedValue), 
                unmaskedValue;
            }
            return $input[0]._valueGet();
        }
        function TranslatePosition(pos) {
            if (isRTL && "number" == typeof pos && (!opts.greedy || "" != opts.placeholder)) {
                var bffrLght = getBuffer().length;
                pos = bffrLght - pos;
            }
            return pos;
        }
        function caret(input, begin, end) {
            var range, npt = input.jquery && input.length > 0 ? input[0] : input;
            if ("number" != typeof begin) {
                var data = $(npt).data("_inputmask");
                return !$(npt).is(":visible") && data && void 0 != data.caret ? (begin = data.caret.begin, 
                end = data.caret.end) : npt.setSelectionRange ? (begin = npt.selectionStart, end = npt.selectionEnd) : document.selection && document.selection.createRange && (range = document.selection.createRange(), 
                begin = 0 - range.duplicate().moveStart("character", -1e5), end = begin + range.text.length), 
                begin = TranslatePosition(begin), end = TranslatePosition(end), {
                    begin: begin,
                    end: end
                };
            }
            begin = TranslatePosition(begin), end = TranslatePosition(end), end = "number" == typeof end ? end : begin;
            var data = $(npt).data("_inputmask") || {};
            if (data.caret = {
                begin: begin,
                end: end
            }, $(npt).data("_inputmask", data), $(npt).is(":visible")) {
                var scrollCalc = $(npt).css("font-size").replace("px", "") * end;
                npt.scrollLeft = scrollCalc > npt.scrollWidth ? scrollCalc : 0, 0 == opts.insertMode && begin == end && end++, 
                npt.setSelectionRange ? (npt.selectionStart = begin, npt.selectionEnd = end) : npt.createTextRange && (range = npt.createTextRange(), 
                range.collapse(!0), range.moveEnd("character", end), range.moveStart("character", begin), 
                range.select());
            }
        }
        function determineLastRequiredPosition(returnDefinition) {
            var pos, testPos, buffer = getBuffer(), bl = buffer.length, lvp = getLastValidPosition(), positions = {}, lvTest = getMaskSet().validPositions[lvp], ndxIntlzr = void 0 != lvTest ? lvTest.locator.slice() : void 0;
            for (pos = lvp + 1; pos < buffer.length; pos++) testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), 
            ndxIntlzr = testPos.locator.slice(), positions[pos] = $.extend(!0, {}, testPos);
            var lvTestAltArr = lvTest && void 0 != lvTest.alternation ? lvTest.locator[lvTest.alternation].split(",") : [];
            for (pos = bl - 1; pos > lvp && (testPos = positions[pos].match, (testPos.optionality || testPos.optionalQuantifier || lvTest && void 0 != lvTest.alternation && void 0 != positions[pos].locator[lvTest.alternation] && -1 != $.inArray(positions[pos].locator[lvTest.alternation].toString(), lvTestAltArr)) && buffer[pos] == getPlaceholder(pos, testPos)); pos--) bl--;
            return returnDefinition ? {
                l: bl,
                def: positions[bl] ? positions[bl].match : void 0
            } : bl;
        }
        function clearOptionalTail(buffer) {
            for (var rl = determineLastRequiredPosition(), lmib = buffer.length - 1; lmib > rl && !isMask(lmib); lmib--) ;
            buffer.splice(rl, lmib + 1 - rl);
        }
        function isComplete(buffer) {
            if ($.isFunction(opts.isComplete)) return opts.isComplete.call($el, buffer, opts);
            if ("*" == opts.repeat) return void 0;
            var complete = !1, lrp = determineLastRequiredPosition(!0), aml = seekPrevious(lrp.l), lvp = getLastValidPosition();
            if (lvp == aml && (void 0 == lrp.def || lrp.def.newBlockMarker || lrp.def.optionalQuantifier)) {
                complete = !0;
                for (var i = 0; aml >= i; i++) {
                    var mask = isMask(i);
                    if (mask && (void 0 == buffer[i] || buffer[i] == getPlaceholder(i)) || !mask && buffer[i] != getPlaceholder(i)) {
                        complete = !1;
                        break;
                    }
                }
            }
            return complete;
        }
        function isSelection(begin, end) {
            return isRTL ? begin - end > 1 || begin - end == 1 && opts.insertMode : end - begin > 1 || end - begin == 1 && opts.insertMode;
        }
        function installEventRuler(npt) {
            var events = $._data(npt).events;
            $.each(events, function(eventType, eventHandlers) {
                $.each(eventHandlers, function(ndx, eventHandler) {
                    if ("inputmask" == eventHandler.namespace && "setvalue" != eventHandler.type) {
                        var handler = eventHandler.handler;
                        eventHandler.handler = function(e) {
                            return this.readOnly || this.disabled ? void e.preventDefault : handler.apply(this, arguments);
                        };
                    }
                });
            });
        }
        function patchValueProperty(npt) {
            function PatchValhook(type) {
                if (void 0 == $.valHooks[type] || 1 != $.valHooks[type].inputmaskpatch) {
                    var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function(elem) {
                        return elem.value;
                    }, valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function(elem, value) {
                        return elem.value = value, elem;
                    };
                    $.valHooks[type] = {
                        get: function(elem) {
                            var $elem = $(elem);
                            if ($elem.data("_inputmask")) {
                                if ($elem.data("_inputmask").opts.autoUnmask) return $elem.inputmask("unmaskedvalue");
                                var result = valhookGet(elem), inputData = $elem.data("_inputmask"), maskset = inputData.maskset, bufferTemplate = maskset._buffer;
                                return bufferTemplate = bufferTemplate ? bufferTemplate.join("") : "", result != bufferTemplate ? result : "";
                            }
                            return valhookGet(elem);
                        },
                        set: function(elem, value) {
                            var result, $elem = $(elem), inputData = $elem.data("_inputmask");
                            return inputData ? (result = valhookSet(elem, $.isFunction(inputData.opts.onBeforeMask) ? inputData.opts.onBeforeMask.call(el, value, inputData.opts) || value : value), 
                            $elem.triggerHandler("setvalue.inputmask")) : result = valhookSet(elem, value), 
                            result;
                        },
                        inputmaskpatch: !0
                    };
                }
            }
            function getter() {
                var $self = $(this), inputData = $(this).data("_inputmask");
                return inputData ? inputData.opts.autoUnmask ? $self.inputmask("unmaskedvalue") : valueGet.call(this) != getBufferTemplate().join("") ? valueGet.call(this) : "" : valueGet.call(this);
            }
            function setter(value) {
                var inputData = $(this).data("_inputmask");
                inputData ? (valueSet.call(this, $.isFunction(inputData.opts.onBeforeMask) ? inputData.opts.onBeforeMask.call(el, value, inputData.opts) || value : value), 
                $(this).triggerHandler("setvalue.inputmask")) : valueSet.call(this, value);
            }
            function InstallNativeValueSetFallback(npt) {
                $(npt).bind("mouseenter.inputmask", function() {
                    var $input = $(this), input = this, value = input._valueGet();
                    "" != value && value != getBuffer().join("") && (valueSet.call(this, $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(el, value, opts) || value : value), 
                    $input.trigger("setvalue"));
                });
                var events = $._data(npt).events, handlers = events.mouseover;
                if (handlers) {
                    for (var ourHandler = handlers[handlers.length - 1], i = handlers.length - 1; i > 0; i--) handlers[i] = handlers[i - 1];
                    handlers[0] = ourHandler;
                }
            }
            var valueGet, valueSet;
            if (!npt._valueGet) {
                if (Object.getOwnPropertyDescriptor) {
                    Object.getOwnPropertyDescriptor(npt, "value");
                }
                document.__lookupGetter__ && npt.__lookupGetter__("value") ? (valueGet = npt.__lookupGetter__("value"), 
                valueSet = npt.__lookupSetter__("value"), npt.__defineGetter__("value", getter), 
                npt.__defineSetter__("value", setter)) : (valueGet = function() {
                    return npt.value;
                }, valueSet = function(value) {
                    npt.value = value;
                }, PatchValhook(npt.type), InstallNativeValueSetFallback(npt)), npt._valueGet = function() {
                    return isRTL ? valueGet.call(this).split("").reverse().join("") : valueGet.call(this);
                }, npt._valueSet = function(value) {
                    valueSet.call(this, isRTL ? value.split("").reverse().join("") : value);
                };
            }
        }
        function handleRemove(input, k, pos) {
            function generalize() {
                if (opts.keepStatic) {
                    resetMaskSet(!0);
                    var lastAlt, validInputs = [];
                    for (lastAlt = getLastValidPosition(); lastAlt >= 0; lastAlt--) if (getMaskSet().validPositions[lastAlt]) {
                        if (void 0 != getMaskSet().validPositions[lastAlt].alternation) break;
                        validInputs.push(getMaskSet().validPositions[lastAlt].input), delete getMaskSet().validPositions[lastAlt];
                    }
                    if (lastAlt > 0) for (;validInputs.length > 0; ) getMaskSet().p = seekNext(getLastValidPosition()), 
                    keypressEvent.call(input, void 0, !0, validInputs.pop().charCodeAt(0), !1, !1, getMaskSet().p);
                }
            }
            if ((opts.numericInput || isRTL) && (k == $.inputmask.keyCode.BACKSPACE ? k = $.inputmask.keyCode.DELETE : k == $.inputmask.keyCode.DELETE && (k = $.inputmask.keyCode.BACKSPACE), 
            isRTL)) {
                var pend = pos.end;
                pos.end = pos.begin, pos.begin = pend;
            }
            k == $.inputmask.keyCode.BACKSPACE && pos.end - pos.begin <= 1 ? pos.begin = seekPrevious(pos.begin) : k == $.inputmask.keyCode.DELETE && pos.begin == pos.end && pos.end++, 
            stripValidPositions(pos.begin, pos.end), generalize();
            var firstMaskedPos = getLastValidPosition(pos.begin);
            firstMaskedPos < pos.begin ? (-1 == firstMaskedPos && resetMaskSet(), getMaskSet().p = seekNext(firstMaskedPos)) : getMaskSet().p = pos.begin;
        }
        function handleOnKeyResult(input, keyResult, caretPos) {
            if (keyResult && keyResult.refreshFromBuffer) {
                var refresh = keyResult.refreshFromBuffer;
                refreshFromBuffer(refresh === !0 ? refresh : refresh.start, refresh.end, keyResult.buffer), 
                resetMaskSet(!0), void 0 != caretPos && (writeBuffer(input, getBuffer()), caret(input, keyResult.caret || caretPos.begin, keyResult.caret || caretPos.end));
            }
        }
        function keydownEvent(e) {
            skipKeyPressEvent = !1;
            var input = this, $input = $(input), k = e.keyCode, pos = caret(input);
            k == $.inputmask.keyCode.BACKSPACE || k == $.inputmask.keyCode.DELETE || iphone && 127 == k || e.ctrlKey && 88 == k && !isInputEventSupported("cut") ? (e.preventDefault(), 
            88 == k && (valueOnFocus = getBuffer().join("")), handleRemove(input, k, pos), writeBuffer(input, getBuffer(), getMaskSet().p), 
            input._valueGet() == getBufferTemplate().join("") && $input.trigger("cleared"), 
            opts.showTooltip && $input.prop("title", getMaskSet().mask)) : k == $.inputmask.keyCode.END || k == $.inputmask.keyCode.PAGE_DOWN ? setTimeout(function() {
                var caretPos = seekNext(getLastValidPosition());
                opts.insertMode || caretPos != getMaskLength() || e.shiftKey || caretPos--, caret(input, e.shiftKey ? pos.begin : caretPos, caretPos);
            }, 0) : k == $.inputmask.keyCode.HOME && !e.shiftKey || k == $.inputmask.keyCode.PAGE_UP ? caret(input, 0, e.shiftKey ? pos.begin : 0) : k == $.inputmask.keyCode.ESCAPE || 90 == k && e.ctrlKey ? (checkVal(input, !0, !1, valueOnFocus.split("")), 
            $input.click()) : k != $.inputmask.keyCode.INSERT || e.shiftKey || e.ctrlKey ? 0 != opts.insertMode || e.shiftKey || (k == $.inputmask.keyCode.RIGHT ? setTimeout(function() {
                var caretPos = caret(input);
                caret(input, caretPos.begin);
            }, 0) : k == $.inputmask.keyCode.LEFT && setTimeout(function() {
                var caretPos = caret(input);
                caret(input, isRTL ? caretPos.begin + 1 : caretPos.begin - 1);
            }, 0)) : (opts.insertMode = !opts.insertMode, caret(input, opts.insertMode || pos.begin != getMaskLength() ? pos.begin : pos.begin - 1));
            var currentCaretPos = caret(input), keydownResult = opts.onKeyDown.call(this, e, getBuffer(), currentCaretPos.begin, opts);
            handleOnKeyResult(input, keydownResult, currentCaretPos), ignorable = -1 != $.inArray(k, opts.ignorables);
        }
        function keypressEvent(e, checkval, k, writeOut, strict, ndx) {
            if (void 0 == k && skipKeyPressEvent) return !1;
            skipKeyPressEvent = !0;
            var input = this, $input = $(input);
            e = e || window.event;
            var k = checkval ? k : e.which || e.charCode || e.keyCode;
            if (!(checkval === !0 || e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable)) return !0;
            if (k) {
                checkval !== !0 && 46 == k && 0 == e.shiftKey && "," == opts.radixPoint && (k = 44);
                var forwardPosition, pos = checkval ? {
                    begin: ndx,
                    end: ndx
                } : caret(input), c = String.fromCharCode(k), isSlctn = isSelection(pos.begin, pos.end);
                isSlctn && (getMaskSet().undoPositions = $.extend(!0, {}, getMaskSet().validPositions), 
                handleRemove(input, $.inputmask.keyCode.DELETE, pos), opts.insertMode || (opts.insertMode = !opts.insertMode, 
                setValidPosition(pos.begin, strict), opts.insertMode = !opts.insertMode), isSlctn = !opts.multi), 
                getMaskSet().writeOutBuffer = !0;
                var p = isRTL && !isSlctn ? pos.end : pos.begin, valResult = isValid(p, c, strict);
                if (valResult !== !1) {
                    if (valResult !== !0 && (p = void 0 != valResult.pos ? valResult.pos : p, c = void 0 != valResult.c ? valResult.c : c), 
                    resetMaskSet(!0), void 0 != valResult.caret) forwardPosition = valResult.caret; else {
                        var vps = getMaskSet().validPositions;
                        forwardPosition = !opts.keepStatic && (void 0 != vps[p + 1] && getTests(p + 1, vps[p].locator.slice(), p).length > 1 || void 0 != vps[p].alternation) ? p + 1 : seekNext(p);
                    }
                    getMaskSet().p = forwardPosition;
                }
                if (writeOut !== !1) {
                    var self = this;
                    if (setTimeout(function() {
                        opts.onKeyValidation.call(self, valResult, opts);
                    }, 0), getMaskSet().writeOutBuffer && valResult !== !1) {
                        var buffer = getBuffer();
                        writeBuffer(input, buffer, checkval ? void 0 : opts.numericInput ? seekPrevious(forwardPosition) : forwardPosition), 
                        checkval !== !0 && setTimeout(function() {
                            isComplete(buffer) === !0 && $input.trigger("complete"), skipInputEvent = !0, $input.trigger("input");
                        }, 0);
                    } else isSlctn && (getMaskSet().buffer = void 0, getMaskSet().validPositions = getMaskSet().undoPositions);
                } else isSlctn && (getMaskSet().buffer = void 0, getMaskSet().validPositions = getMaskSet().undoPositions);
                if (opts.showTooltip && $input.prop("title", getMaskSet().mask), e && e.preventDefault(), 
                checkval) {
                    var keyResult = opts.onKeyPress.call(this, e, getBuffer(), -1, opts);
                    keyResult && (handleOnKeyResult(input, keyResult), getMaskSet().p = getLastValidPosition() + 1);
                } else {
                    var currentCaretPos = caret(input);
                    handleOnKeyResult(input, opts.onKeyPress.call(this, e, getBuffer(), currentCaretPos.begin, opts), currentCaretPos);
                }
            }
        }
        function keyupEvent(e) {
            var input = ($(this), this), buffer = (e.keyCode, getBuffer()), currentCaretPos = caret(input), keyupResult = opts.onKeyUp.call(this, e, buffer, currentCaretPos.begin, opts);
            handleOnKeyResult(input, keyupResult, currentCaretPos);
        }
        function pasteEvent(e) {
            if (skipInputEvent === !0 && "input" == e.type) return skipInputEvent = !1, !0;
            var input = this, $input = $(input), inputValue = input._valueGet(), caretPos = caret(input);
            if ("propertychange" == e.type && input._valueGet().length <= getMaskLength()) return !0;
            "paste" == e.type && (window.clipboardData && window.clipboardData.getData ? inputValue = inputValue.substr(0, caretPos.begin) + window.clipboardData.getData("Text") + inputValue.substr(caretPos.end, inputValue.length) : e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData && (inputValue = inputValue.substr(0, caretPos.begin) + e.originalEvent.clipboardData.getData("text/plain") + inputValue.substr(caretPos.end, inputValue.length)));
            var pasteValue = $.isFunction(opts.onBeforePaste) ? opts.onBeforePaste.call(input, inputValue, opts) || inputValue : inputValue;
            return checkVal(input, !0, !1, isRTL ? pasteValue.split("").reverse() : pasteValue.split("")), 
            $input.click(), isComplete(getBuffer()) === !0 && $input.trigger("complete"), !1;
        }
        function mobileInputEvent(e) {
            if (skipInputEvent === !0 && "input" == e.type) return skipInputEvent = !1, !0;
            var input = this, caretPos = caret(input), currentValue = input._valueGet();
            currentValue = currentValue.replace(new RegExp("(" + escapeRegex(getBufferTemplate().join("")) + ")*"), ""), 
            caretPos.begin > currentValue.length && (caret(input, currentValue.length), caretPos = caret(input)), 
            getBuffer().length - currentValue.length != 1 || currentValue.charAt(caretPos.begin) == getBuffer()[caretPos.begin] || currentValue.charAt(caretPos.begin + 1) == getBuffer()[caretPos.begin] || isMask(caretPos.begin) || (e.keyCode = $.inputmask.keyCode.BACKSPACE, 
            keydownEvent.call(input, e)), e.preventDefault();
        }
        function inputFallBackEvent(e) {
            if (skipInputEvent === !0 && "input" == e.type) return skipInputEvent = !1, !0;
            var input = this;
            checkVal(input, !1, !1);
            var forwardPosition = getMaskSet().p;
            writeBuffer(input, getBuffer(), opts.numericInput ? seekPrevious(forwardPosition) : forwardPosition), 
            isComplete(getBuffer()) === !0 && $(input).trigger("complete"), e.preventDefault();
        }
        function compositionupdateEvent(e) {
            skipInputEvent = !0;
            var input = this;
            return setTimeout(function() {
                caret(input, caret(input).begin - 1);
                var keypress = $.Event("keypress");
                keypress.which = e.originalEvent.data.charCodeAt(0), skipKeyPressEvent = !1, ignorable = !1, 
                keypressEvent.call(input, keypress, void 0, void 0, !1);
                var forwardPosition = getMaskSet().p;
                writeBuffer(input, getBuffer(), opts.numericInput ? seekPrevious(forwardPosition) : forwardPosition);
            }, 0), !1;
        }
        function mask(el) {
            if ($el = $(el), $el.is(":input") && isInputTypeSupported($el.attr("type"))) {
                if ($el.data("_inputmask", {
                    maskset: maskset,
                    opts: opts,
                    isRTL: !1
                }), opts.showTooltip && $el.prop("title", getMaskSet().mask), ("rtl" == el.dir || opts.rightAlign) && $el.css("text-align", "right"), 
                "rtl" == el.dir || opts.numericInput) {
                    el.dir = "ltr", $el.removeAttr("dir");
                    var inputData = $el.data("_inputmask");
                    inputData.isRTL = !0, $el.data("_inputmask", inputData), isRTL = !0;
                }
                $el.unbind(".inputmask"), $el.closest("form").bind("submit", function() {
                    valueOnFocus != getBuffer().join("") && $el.change(), $el[0]._valueGet && $el[0]._valueGet() == getBufferTemplate().join("") && $el[0]._valueSet(""), 
                    opts.removeMaskOnSubmit && $el.inputmask("remove");
                }).bind("reset", function() {
                    setTimeout(function() {
                        $el.trigger("setvalue");
                    }, 0);
                }), $el.bind("mouseenter.inputmask", function() {
                    var $input = $(this), input = this;
                    !$input.is(":focus") && opts.showMaskOnHover && input._valueGet() != getBuffer().join("") && writeBuffer(input, getBuffer());
                }).bind("blur.inputmask", function() {
                    var $input = $(this), input = this;
                    if ($input.data("_inputmask")) {
                        var nptValue = input._valueGet(), buffer = getBuffer().slice();
                        if (firstClick = !0, valueOnFocus != buffer.join("") && ($input.change(), valueOnFocus = buffer.join("")), 
                        "" != nptValue) {
                            if (opts.clearMaskOnLostFocus && (nptValue == getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer)), 
                            isComplete(buffer) === !1 && ($input.trigger("incomplete"), opts.clearIncomplete && (resetMaskSet(), 
                            buffer = opts.clearMaskOnLostFocus ? [] : getBufferTemplate().slice())), $.isFunction(opts.postProcessOnBlur)) {
                                var keyResult = opts.postProcessOnBlur.call(input, buffer, opts);
                                keyResult && (handleOnKeyResult(input, keyResult), buffer = getBuffer());
                            }
                            writeBuffer(input, buffer);
                        }
                    }
                }).bind("focus.inputmask", function() {
                    var input = ($(this), this), nptValue = input._valueGet();
                    opts.showMaskOnFocus && (!opts.showMaskOnHover || opts.showMaskOnHover && "" == nptValue) && input._valueGet() != getBuffer().join("") && writeBuffer(input, getBuffer(), seekNext(getLastValidPosition())), 
                    valueOnFocus = getBuffer().join("");
                }).bind("mouseleave.inputmask", function() {
                    var $input = $(this), input = this;
                    if (opts.clearMaskOnLostFocus) {
                        var buffer = getBuffer().slice(), nptValue = input._valueGet();
                        $input.is(":focus") || nptValue == $input.attr("placeholder") || "" == nptValue || (nptValue == getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer), 
                        writeBuffer(input, buffer));
                    }
                }).bind("click.inputmask", function() {
                    var $input = $(this), input = this;
                    if ($input.is(":focus")) {
                        var selectedCaret = caret(input);
                        if (selectedCaret.begin == selectedCaret.end) if (opts.radixFocus && "" != opts.radixPoint && -1 != $.inArray(opts.radixPoint, getBuffer()) && (firstClick || getBuffer().join("") == getBufferTemplate().join(""))) caret(input, $.inArray(opts.radixPoint, getBuffer())), 
                        firstClick = !1; else {
                            var clickPosition = isRTL ? TranslatePosition(selectedCaret.begin) : selectedCaret.begin, lastPosition = seekNext(getLastValidPosition(clickPosition));
                            lastPosition > clickPosition ? caret(input, isMask(clickPosition) ? clickPosition : seekNext(clickPosition)) : caret(input, lastPosition);
                        }
                    }
                }).bind("dblclick.inputmask", function() {
                    var input = this;
                    setTimeout(function() {
                        caret(input, 0, seekNext(getLastValidPosition()));
                    }, 0);
                }).bind(PasteEventType + ".inputmask dragdrop.inputmask drop.inputmask", pasteEvent).bind("setvalue.inputmask", function() {
                    var input = this;
                    checkVal(input, !0, !1), valueOnFocus = getBuffer().join(""), (opts.clearMaskOnLostFocus || opts.clearIncomplete) && input._valueGet() == getBufferTemplate().join("") && input._valueSet("");
                }).bind("cut.inputmask", function(e) {
                    skipInputEvent = !0;
                    var input = this, $input = $(input), pos = caret(input);
                    handleRemove(input, $.inputmask.keyCode.DELETE, pos);
                    var keypressResult = opts.onKeyPress.call(this, e, getBuffer(), getMaskSet().p, opts);
                    handleOnKeyResult(input, keypressResult, {
                        begin: getMaskSet().p,
                        end: getMaskSet().p
                    }), input._valueGet() == getBufferTemplate().join("") && $input.trigger("cleared"), 
                    opts.showTooltip && $input.prop("title", getMaskSet().mask);
                }).bind("complete.inputmask", opts.oncomplete).bind("incomplete.inputmask", opts.onincomplete).bind("cleared.inputmask", opts.oncleared), 
                $el.bind("keydown.inputmask", keydownEvent).bind("keypress.inputmask", keypressEvent).bind("keyup.inputmask", keyupEvent).bind("compositionupdate.inputmask", compositionupdateEvent), 
                "paste" === PasteEventType && $el.bind("input.inputmask", inputFallBackEvent), (android || androidfirefox || androidchrome || kindle) && ($el.unbind("input.inputmask"), 
                $el.bind("input.inputmask", mobileInputEvent)), patchValueProperty(el);
                var initialValue = $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(el, el._valueGet(), opts) || el._valueGet() : el._valueGet();
                checkVal(el, !0, !1, initialValue.split(""));
                var buffer = getBuffer().slice();
                valueOnFocus = buffer.join("");
                var activeElement;
                try {
                    activeElement = document.activeElement;
                } catch (e) {}
                isComplete(buffer) === !1 && opts.clearIncomplete && resetMaskSet(), opts.clearMaskOnLostFocus && (buffer.join("") == getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer)), 
                writeBuffer(el, buffer), activeElement === el && caret(el, seekNext(getLastValidPosition())), 
                installEventRuler(el);
            }
        }
        var valueOnFocus, $el, maxLength, isRTL = !1, skipKeyPressEvent = !1, skipInputEvent = !1, ignorable = !1, firstClick = !0;
        if (void 0 != actionObj) switch (actionObj.action) {
          case "isComplete":
            return $el = $(actionObj.el), maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            isComplete(actionObj.buffer);

          case "unmaskedvalue":
            return $el = actionObj.$input, maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            isRTL = actionObj.$input.data("_inputmask").isRTL, unmaskedvalue(actionObj.$input);

          case "mask":
            valueOnFocus = getBuffer().join(""), mask(actionObj.el);
            break;

          case "format":
            $el = $({}), $el.data("_inputmask", {
                maskset: maskset,
                opts: opts,
                isRTL: opts.numericInput
            }), opts.numericInput && (isRTL = !0);
            var valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call($el, actionObj.value, opts) || actionObj.value : actionObj.value).split("");
            return checkVal($el, !1, !1, isRTL ? valueBuffer.reverse() : valueBuffer), opts.onKeyPress.call(this, void 0, getBuffer(), 0, opts), 
            actionObj.metadata ? {
                value: isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join(""),
                metadata: $el.inputmask("getmetadata")
            } : isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join("");

          case "isValid":
            $el = $({}), $el.data("_inputmask", {
                maskset: maskset,
                opts: opts,
                isRTL: opts.numericInput
            }), opts.numericInput && (isRTL = !0);
            var valueBuffer = actionObj.value.split("");
            checkVal($el, !1, !0, isRTL ? valueBuffer.reverse() : valueBuffer);
            for (var buffer = getBuffer(), rl = determineLastRequiredPosition(), lmib = buffer.length - 1; lmib > rl && !isMask(lmib); lmib--) ;
            return buffer.splice(rl, lmib + 1 - rl), isComplete(buffer) && actionObj.value == buffer.join("");

          case "getemptymask":
            return $el = $(actionObj.el), maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            getBufferTemplate();

          case "remove":
            var el = actionObj.el;
            $el = $(el), maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            el._valueSet(unmaskedvalue($el)), $el.unbind(".inputmask"), $el.removeData("_inputmask");
            var valueProperty;
            Object.getOwnPropertyDescriptor && (valueProperty = Object.getOwnPropertyDescriptor(el, "value")), 
            valueProperty && valueProperty.get ? el._valueGet && Object.defineProperty(el, "value", {
                get: el._valueGet,
                set: el._valueSet
            }) : document.__lookupGetter__ && el.__lookupGetter__("value") && el._valueGet && (el.__defineGetter__("value", el._valueGet), 
            el.__defineSetter__("value", el._valueSet));
            try {
                delete el._valueGet, delete el._valueSet;
            } catch (e) {
                el._valueGet = void 0, el._valueSet = void 0;
            }
            break;

          case "getmetadata":
            if ($el = $(actionObj.el), maskset = $el.data("_inputmask").maskset, opts = $el.data("_inputmask").opts, 
            $.isArray(maskset.metadata)) {
                for (var alternation, lvp = getLastValidPosition(), firstAlt = lvp; firstAlt >= 0; firstAlt--) if (getMaskSet().validPositions[firstAlt] && void 0 != getMaskSet().validPositions[firstAlt].alternation) {
                    alternation = getMaskSet().validPositions[firstAlt].alternation;
                    break;
                }
                return void 0 != alternation ? maskset.metadata[getMaskSet().validPositions[lvp].locator[alternation]] : maskset.metadata[0];
            }
            return maskset.metadata;
        }
    }
    if (void 0 === $.fn.inputmask) {
        var ua = ("function" == typeof ScriptEngineMajorVersion ? ScriptEngineMajorVersion() >= 10 : !1, 
        navigator.userAgent), iphone = null !== ua.match(new RegExp("iphone", "i")), android = null !== ua.match(new RegExp("android.*safari.*", "i")), androidchrome = null !== ua.match(new RegExp("android.*chrome.*", "i")), androidfirefox = null !== ua.match(new RegExp("android.*firefox.*", "i")), kindle = /Kindle/i.test(ua) || /Silk/i.test(ua) || /KFTT/i.test(ua) || /KFOT/i.test(ua) || /KFJWA/i.test(ua) || /KFJWI/i.test(ua) || /KFSOWI/i.test(ua) || /KFTHWA/i.test(ua) || /KFTHWI/i.test(ua) || /KFAPWA/i.test(ua) || /KFAPWI/i.test(ua), PasteEventType = isInputEventSupported("paste") ? "paste" : isInputEventSupported("input") ? "input" : "propertychange";
        $.inputmask = {
            defaults: {
                placeholder: "_",
                optionalmarker: {
                    start: "[",
                    end: "]"
                },
                quantifiermarker: {
                    start: "{",
                    end: "}"
                },
                groupmarker: {
                    start: "(",
                    end: ")"
                },
                alternatormarker: "|",
                escapeChar: "\\",
                mask: null,
                oncomplete: $.noop,
                onincomplete: $.noop,
                oncleared: $.noop,
                repeat: 0,
                greedy: !0,
                autoUnmask: !1,
                removeMaskOnSubmit: !1,
                clearMaskOnLostFocus: !0,
                insertMode: !0,
                clearIncomplete: !1,
                aliases: {},
                alias: null,
                onKeyUp: $.noop,
                onKeyPress: $.noop,
                onKeyDown: $.noop,
                onBeforeMask: void 0,
                onBeforePaste: void 0,
                onUnMask: void 0,
                showMaskOnFocus: !0,
                showMaskOnHover: !0,
                onKeyValidation: $.noop,
                skipOptionalPartCharacter: " ",
                showTooltip: !1,
                numericInput: !1,
                rightAlign: !1,
                radixPoint: "",
                radixFocus: !1,
                nojumps: !1,
                nojumpsThreshold: 0,
                keepStatic: void 0,
                definitions: {
                    "9": {
                        validator: "[0-9]",
                        cardinality: 1,
                        definitionSymbol: "*"
                    },
                    a: {
                        validator: "[A-Za-zА-яЁёÀ-ÿµ]",
                        cardinality: 1,
                        definitionSymbol: "*"
                    },
                    "*": {
                        validator: "[0-9A-Za-zА-яЁёÀ-ÿµ]",
                        cardinality: 1
                    }
                },
                ignorables: [ 8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 ],
                isComplete: void 0,
                postProcessOnBlur: void 0
            },
            keyCode: {
                ALT: 18,
                BACKSPACE: 8,
                CAPS_LOCK: 20,
                COMMA: 188,
                COMMAND: 91,
                COMMAND_LEFT: 91,
                COMMAND_RIGHT: 93,
                CONTROL: 17,
                DELETE: 46,
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                INSERT: 45,
                LEFT: 37,
                MENU: 93,
                NUMPAD_ADD: 107,
                NUMPAD_DECIMAL: 110,
                NUMPAD_DIVIDE: 111,
                NUMPAD_ENTER: 108,
                NUMPAD_MULTIPLY: 106,
                NUMPAD_SUBTRACT: 109,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                PERIOD: 190,
                RIGHT: 39,
                SHIFT: 16,
                SPACE: 32,
                TAB: 9,
                UP: 38,
                WINDOWS: 91
            },
            masksCache: {},
            escapeRegex: function(str) {
                var specials = [ "/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\" ];
                return str.replace(new RegExp("(\\" + specials.join("|\\") + ")", "gim"), "\\$1");
            },
            format: function(value, options, metadata) {
                var opts = $.extend(!0, {}, $.inputmask.defaults, options);
                return resolveAlias(opts.alias, options, opts), maskScope({
                    action: "format",
                    value: value,
                    metadata: metadata
                }, generateMaskSet(opts), opts);
            },
            isValid: function(value, options) {
                var opts = $.extend(!0, {}, $.inputmask.defaults, options);
                return resolveAlias(opts.alias, options, opts), maskScope({
                    action: "isValid",
                    value: value
                }, generateMaskSet(opts), opts);
            }
        }, $.fn.inputmask = function(fn, options, targetScope, targetData, msk) {
            function importAttributeOptions(npt, opts, importedOptionsContainer) {
                var $npt = $(npt);
                $npt.data("inputmask-alias") && resolveAlias($npt.data("inputmask-alias"), {}, opts);
                for (var option in opts) {
                    var optionData = $npt.data("inputmask-" + option.toLowerCase());
                    void 0 != optionData && ("mask" == option && 0 == optionData.indexOf("[") ? (opts[option] = optionData.replace(/[\s[\]]/g, "").split("','"), 
                    opts[option][0] = opts[option][0].replace("'", ""), opts[option][opts[option].length - 1] = opts[option][opts[option].length - 1].replace("'", "")) : opts[option] = "boolean" == typeof optionData ? optionData : optionData.toString(), 
                    importedOptionsContainer && (importedOptionsContainer[option] = opts[option]));
                }
                return opts;
            }
            targetScope = targetScope || maskScope, targetData = targetData || "_inputmask";
            var maskset, opts = $.extend(!0, {}, $.inputmask.defaults, options);
            if ("string" == typeof fn) switch (fn) {
              case "mask":
                return resolveAlias(opts.alias, options, opts), maskset = generateMaskSet(opts, targetScope !== maskScope), 
                void 0 == maskset ? this : this.each(function() {
                    targetScope({
                        action: "mask",
                        el: this
                    }, $.extend(!0, {}, maskset), importAttributeOptions(this, opts));
                });

              case "unmaskedvalue":
                var $input = $(this);
                return $input.data(targetData) ? targetScope({
                    action: "unmaskedvalue",
                    $input: $input
                }) : $input.val();

              case "remove":
                return this.each(function() {
                    var $input = $(this);
                    $input.data(targetData) && targetScope({
                        action: "remove",
                        el: this
                    });
                });

              case "getemptymask":
                return this.data(targetData) ? targetScope({
                    action: "getemptymask",
                    el: this
                }) : "";

              case "hasMaskedValue":
                return this.data(targetData) ? !this.data(targetData).opts.autoUnmask : !1;

              case "isComplete":
                return this.data(targetData) ? targetScope({
                    action: "isComplete",
                    buffer: this[0]._valueGet().split(""),
                    el: this
                }) : !0;

              case "getmetadata":
                return this.data(targetData) ? targetScope({
                    action: "getmetadata",
                    el: this
                }) : void 0;

              case "_detectScope":
                return resolveAlias(opts.alias, options, opts), void 0 == msk || resolveAlias(msk, options, opts) || -1 != $.inArray(msk, [ "mask", "unmaskedvalue", "remove", "getemptymask", "hasMaskedValue", "isComplete", "getmetadata", "_detectScope" ]) || (opts.mask = msk), 
                $.isFunction(opts.mask) && (opts.mask = opts.mask.call(this, opts)), $.isArray(opts.mask);

              default:
                return resolveAlias(opts.alias, options, opts), resolveAlias(fn, options, opts) || (opts.mask = fn), 
                maskset = generateMaskSet(opts, targetScope !== maskScope), void 0 == maskset ? this : this.each(function() {
                    targetScope({
                        action: "mask",
                        el: this
                    }, $.extend(!0, {}, maskset), importAttributeOptions(this, opts));
                });
            } else {
                if ("object" == typeof fn) return opts = $.extend(!0, {}, $.inputmask.defaults, fn), 
                resolveAlias(opts.alias, fn, opts), maskset = generateMaskSet(opts, targetScope !== maskScope), 
                void 0 == maskset ? this : this.each(function() {
                    targetScope({
                        action: "mask",
                        el: this
                    }, $.extend(!0, {}, maskset), importAttributeOptions(this, opts));
                });
                if (void 0 == fn) return this.each(function() {
                    var attrOptions = $(this).attr("data-inputmask");
                    if (attrOptions && "" != attrOptions) try {
                        attrOptions = attrOptions.replace(new RegExp("'", "g"), '"');
                        var dataoptions = $.parseJSON("{" + attrOptions + "}");
                        $.extend(!0, dataoptions, options), opts = $.extend(!0, {}, $.inputmask.defaults, dataoptions), 
                        opts = importAttributeOptions(this, opts), resolveAlias(opts.alias, dataoptions, opts), 
                        opts.alias = void 0, $(this).inputmask("mask", opts, targetScope);
                    } catch (ex) {}
                    if ($(this).attr("data-inputmask-mask") || $(this).attr("data-inputmask-alias")) {
                        opts = $.extend(!0, {}, $.inputmask.defaults, {});
                        var dataOptions = {};
                        opts = importAttributeOptions(this, opts, dataOptions), resolveAlias(opts.alias, dataOptions, opts), 
                        opts.alias = void 0, $(this).inputmask("mask", opts, targetScope);
                    }
                });
            }
        };
    }
    return $.fn.inputmask;
}(jQuery), jQuery.fn.makeSQ = function(cb) {
    var _e = jQuery(this), _eW = _e.outerWidth();
    _e.css({
        width: _eW,
        height: _eW
    }), "function" == typeof cb && cb();
}, jQuery.fn.winHW = function(ele, h, w, cb) {
    var _e = jQuery(this), _w = jQuery(window), winH = _w.height(), winW = _w.width();
    h && _e.height(winH + "px"), w && _e.width(winW + "px"), "function" == typeof cb && cb();
}, function($, sr) {
    var debounce = function(func, threshold, execAsap) {
        var timeout;
        return function() {
            function delayed() {
                execAsap || func.apply(obj, args), timeout = null;
            }
            var obj = this, args = arguments;
            timeout ? clearTimeout(timeout) : execAsap && func.apply(obj, args), timeout = setTimeout(delayed, threshold || 100);
        };
    };
    jQuery.fn[sr] = function(fn) {
        return fn ? this.bind("resize", debounce(fn)) : this.trigger(sr);
    };
}(jQuery, "smartresize"), function($) {
    function shuffle(array) {
        for (var t, i, m = array.length; m; ) i = Math.floor(Math.random() * m--), t = array[m], 
        array[m] = array[i], array[i] = t;
        return array;
    }
    function setUISlide() {
        UISlide = {
            width: $(".UIBuilderContainer").width(),
            in_width: $(".UIBuilderContainer").innerWidth(),
            count: _ui_builder_list_li.size()
        };
    }
    $(document).foundation({
        reveal: {
            close_on_background_click: !1
        }
    }), $.fn.isOnScreen = function() {
        var element = this.get(0), bounds = element.getBoundingClientRect();
        return bounds.top < window.innerHeight && bounds.bottom > 0;
    }, angular.module("farmApp", [ "mm.foundation" ]), angular.module("farmApp").controller("galleryCtrl", function($scope) {
        function build() {
            var images = shuffle(image_stack[0]);
            return images;
        }
        $scope.rebuild = function(style_type) {
            $scope.images = shuffle(image_stack[style_type]);
        };
        image_stack.BN, image_stack.PK, image_stack.RD;
        $scope.quantity = 5, $scope.images = build();
    });
    var _bod = $("body"), _b = $("#building"), _screenH = $(".winH"), _screenW = $(".winW"), _screenWH = $(".winHW"), _screenCenter = $(".centerCenter"), _screenCenterVertical = $(".centerVertical"), _screenCenterHorizontal = $(".centerHorizontal"), _makeSquare = $(".makeSquare"), _startMod = $("#startModal"), _landscapeMod = $("#landscapeModal"), _calcPrice = ($("#door_center_height"), 
    $("#diagram"), $("#theDiagram"), $(".calcPrice")), _preload = $(".preload"), _product_attr_spec = $("#product-attribute-specs-table td.data"), _buttonContainer = $(".buttonContainer"), _addToCart = $("#addToCart"), _showForm = $("#showForm"), _ui_element_option = ($(".UI"), 
    $(".UI.UI-Option")), _ui_builder_nav_item = ($(".UIBuilderNav"), $(".UIBuilderNav .UI")), _ui_builder_list = $("#UIList"), _ui_builder_list_li = $("ul#UIList li.UISection"), _info_selected_class = "selected", _uni_info_class = "info", _ui_quickNav = $("#quickNav"), _info_Main = $("#infoMain"), _mobile_info_Main = $("#mobileInfoMain"), _accordion_dl_main = $("#mainAccordion"), _accordion_dl_mobile = $("#mobileAccordion"), _selectPartial = "configurable_", _defaultFormOption = ($(".product-essential select"), 
    "Choose a"), _price = $("#mainPrice .regular-price .price"), _quoteModal = $("#quoteModal"), _quoteMessage = _quoteModal.find("input[value=##build_description##]"), _miniCart = $(".header-minicart .count"), _cart_count = ($(".header-minicart .count"), 
    $(".fa.fa-shopping-cart span")), alpha = "1qQ2wW3eE4rR5tT6yY7uU8iI9oO0pPazsxdcfvgbhnjmklAZSXDCFVGBHNJMKL", _lastBuild = (alpha.split(""), 
    alpha.split("").reverse(), "lastBuild"), _lastSelection = 0, _cookExp = 7, _cookPath = window.location.pathname, hash = (setTimeout(_.noop, 2500), 
    window.location.hash.split("#").pop().split("!")), editConfiguration = "undefined" != typeof aeConfig ? aeConfig.config.reconfigure : !1;
    $.cookie.raw = !0, $.fn.tagName = function() {
        return this.prop("tagName").toLowerCase();
    }, $.fn.doesExist = function() {
        return $(this).length > 0;
    }, $.fn.centerCenter = function() {
        return $(this).length <= 0 ? !1 : void $(this).each(function() {
            var hWide = $(this).outerWidth() / 2, hTall = $(this).outerHeight() / 2;
            hWide = "-" + hWide + "px", hTall = "-" + hTall + "px", $(this).css({
                "margin-left": hWide,
                "margin-top": hTall
            });
        });
    }, $.fn.centerVertical = function() {
        return $(this).length <= 0 ? !1 : void $(this).each(function() {
            var hTall = $(this).height() / 2;
            hTall = "-" + hTall + "px", $(this).css({
                "margin-top": hTall
            });
        });
    }, $.fn.centerHorizontal = function() {
        return $(this).length <= 0 ? !1 : void $(this).each(function() {
            var hWide = $(this).width() / 2;
            hWide = "-" + hWide + "px", $(this).css({
                "margin-left": hWide
            });
        });
    };
    var browser = navigator.sayswho.toLowerCase(), is_explorer = (browser.indexOf("chrome") > -1, 
    browser.indexOf("ie") > -1), is_IE11 = is_explorer && parseInt(browser.split(" ")[1]) >= 11 ? !0 : !1, is_IE10Below = !is_IE11 && is_explorer && parseInt(browser.split(" ")[1]) < 11 ? !0 : !1, is_IE9Below = !is_IE11 && is_explorer && parseInt(browser.split(" ")[1]) < 10 ? !0 : !1, is_safari = (browser.indexOf("firefox") > -1, 
    browser.indexOf("safari") > -1), device_type = (browser.indexOf("presto") > -1, 
    isMobile.any() ? "mobile" : "desktop");
    setTimeout(function() {
        $("body").addClass(device_type + " op_10 " + browser.split(" ")[0]);
    }, 500), function() {
        for (var method, noop = function() {}, methods = [ "assert", "clear", "count", "debug", "dir", "dirxml", "error", "exception", "group", "groupCollapsed", "groupEnd", "info", "log", "markTimeline", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn" ], length = methods.length, console = window.console = window.console || {}; length--; ) method = methods[length], 
        console[method] || (console[method] = noop);
    }();
    var UISlide = {};
    setUISlide(), $.extend(!0, UISlide, {
        contanWidth: UISlide.in_width * UISlide.count
    });
    var s7_guy = hash.indexOf("charact1") >= 0 ? "xx-xx-000xxx00_charact1" : "xx-xx-000xxx00_charact3-1", s7_colors = {
        MAIN: "$main$",
        "Hunter Green": "$huntergreen$",
        Black: "$black$",
        Gray: "$gray$",
        White: "$white$",
        Green: "$green$",
        Tan: "$tan$",
        Clear: "$translucent$",
        Brown: "$brown$"
    }, _selectArray = {
        Style: null,
        Width: null,
        Height: null,
        Length: null,
        FabricMaterial: null,
        FabricColor: null
    }, _optionsObj = {
        product_line: "PE",
        style: {
            "0": null,
            "14": "A",
            "13": "B",
            "12": "C"
        },
        category: "A",
        front_panel: {
            "17": "C",
            "18": "D"
        },
        back_panel: {
            "default": "A",
            "17": "C",
            "18": "D"
        },
        fabricmaterial: {
            "15": "01",
            "17": "02",
            "16": "03"
        },
        fabriccolor: {
            "23": "01",
            GY: "03",
            GN: "04",
            TN: "05",
            "19": "08",
            "18": "09"
        },
        frame_color: "F",
        Width: 3,
        Length: 3,
        Height: 2
    }, _formObj = {
        product_line: "PE",
        style: {},
        width: {},
        height: {},
        length: {},
        fabricmaterial: {},
        fabriccolor: {}
    }, step = 1, _gaEvent = _gaEvent || {
        uiEvent: function(tagname, eventtype, datainteraction) {
            ga("send", "event", tagname, eventtype, datainteraction);
        },
        cart: {
            added: function() {
                ga("send", "event", "button", "click", "Add To Cart");
            },
            updated: function() {
                ga("send", "event", "button", "click", "Update To Cart");
            }
        }
    }, farmBuilding = farmBuilding || {};
    !function(_NS, undefined) {
        window._local = {
            isConfigurable: function() {
                return _bod.hasClass("product-sp-series-shelter");
            },
            firstElement: function(obj) {
                for (var a in obj) return a;
            },
            center: function() {
                centertimer && clearTimeout(centertimer);
                var doCenter = function() {
                    _screenCenter.each(function() {
                        $(this).stop().centerCenter();
                    });
                }, centertimer = setTimeout(doCenter, 1500);
            },
            setActive: function(pos) {
                var currentPos = pos + 1, quickSelect = function() {
                    $(this).data("index") < currentPos ? $(this).removeClass("disable").addClass("active") : $(this).data("index") == currentPos ? $(this).removeClass("disable").addClass("current") : $(this).removeClass("active").addClass("disable");
                };
                return $(".UI.quickSelect").each(quickSelect);
            },
            translateValue: function(v, item) {
                if (v.indexOf(_defaultFormOption) <= 0) return !1;
                var _initialV = v, _translatedV = _initialV, _item = item.toLowerCase();
                return _translatedV = _formObj[_item][_initialV];
            },
            translateSku: function(type, value) {
                var localArray = _optionsObj[type.toLowerCase()], transVal = localArray[value];
                return transVal && "undefined" !== transVal && null !== transVal ? transVal : !1;
            },
            calculateSku: function() {
                var style = this.translateSku("style", _formObj.style[_selectArray.Style]), front_panel = _formObj.width[_selectArray.Width] <= 17 ? _optionsObj.front_panel[17] : _optionsObj.front_panel[18], back_panel = _optionsObj.back_panel["default"];
                "BN" == _formObj.style[_selectArray.Style] && (back_panel = _formObj.width[_selectArray.Width] <= 17 ? _optionsObj.back_panel[17] : _optionsObj.back_panel[18]);
                var fabric = this.translateSku("fabricmaterial", _formObj.fabricmaterial[_selectArray.FabricMaterial]), color = this.translateSku("fabriccolor", _formObj.fabriccolor[_selectArray.FabricColor]), width = "0" + _formObj.width[_selectArray.Width], length = _formObj.length[_selectArray.Length] < 100 ? "0" + _formObj.length[_selectArray.Length] : _formObj.length[_selectArray.Length], SKU = _optionsObj.product_line + style + _optionsObj.category + front_panel + back_panel + fabric + color + _optionsObj.frame_color + width + length + _formObj.height[_selectArray.Height];
                return SKU;
            },
            pop: {
                start: function() {
                    _bod.addClass("start"), _startMod.foundation("reveal", "open");
                }
            },
            buildCookie: {
                shuffle: function(o) {
                    for (var j, x, i = o.length; i; j = 9, x = o[--i], o[i] = o[j], o[j] = x) ;
                    return o;
                },
                set: function(_name, _val, _path) {
                    var setPath = "undefined" == typeof _path ? _cookPath : _path;
                    $.cookie(_name, _val, {
                        expires: _cookExp,
                        path: setPath
                    });
                },
                get: function(_name) {
                    return $.cookie(_name);
                },
                getObj: function() {
                    return $.cookie();
                },
                tester: function(_name) {
                    return $.cookie(_name) !== undefined ? !0 : !1;
                },
                relinquish: function(_name) {
                    return $.removeCookie(_name, {
                        path: _cookPath
                    });
                },
                clear: function() {
                    return Object.keys(_local.buildCookie.getObj()).forEach(function(key) {
                        _local.buildCookie.relinquish(_lastBuild), RegExp(/\b(build_)/g).test(key) && _local.buildCookie.relinquish(key);
                    }), this.set("refresh", "1"), farmBuilding.init.refresh();
                }
            }
        }, $.extend(!0, _NS, {
            geo: {
                notification: function(_allow, _geoData) {
                    var geoData = jQuery.parseJSON(_geoData);
                    _allow ? $(".geo_country").text(geoData.country + ", " + geoData.region) : ($("#geo_notify").addClass("alert").removeClass("hide"), 
                    $(".geo_country").text(geoData.country + ", " + geoData.region));
                },
                reference: function() {
                    return _local.buildCookie.tester("allowed_country") && _local.buildCookie.tester("geoData") ? void _NS.geo.notification(_local.buildCookie.get("allowed_country"), _local.buildCookie.get("geoData")) : void $.ajax({
                        type: "POST",
                        url: "/geo/",
                        data: {
                            key: "98836:k4FKoWiSreou"
                        },
                        dataType: "json",
                        complete: function(data) {
                            if (data) {
                                results = jQuery.parseJSON(data.responseText);
                                var allow_country = _.filter(allowed_countries, function(i) {
                                    return i.value == results.country ? i : void 0;
                                }).length > 0 ? 1 : 0;
                                if (allow_country) {
                                    allow_reg = "allowed_reg_" + results.country;
                                    var allow = _.filter(window[allow_reg], function(i) {
                                        return i.code == results.response.subdivisions[0].iso_code ? i : void 0;
                                    }).length > 0 ? 1 : 0;
                                }
                                if (results.success) {
                                    var _gD = JSON.stringify({
                                        iso_country: results.country,
                                        country: results.response.country.names.en,
                                        iso_region: results.response.subdivisions[0].iso_code,
                                        region: results.response.subdivisions[0].names.en
                                    });
                                    return _local.buildCookie.set("geoData", _gD, "/"), _local.buildCookie.set("allowed_country", allow, "/"), 
                                    void _NS.geo.notification(allow, _gD);
                                }
                                return void console.log("Error: " + results.response);
                            }
                        }
                    });
                }
            },
            imageUrl: function() {
                if ("FabricMaterial" == _lastSelection) return !0;
                var _i = _b.find("img#render"), style = _local.translateSku("style", _selectArray.Style), width = _formObj.width[_selectArray.Width], height = _formObj.height[_selectArray.Height] < 10 ? "0" + _formObj.height[_selectArray.Height] : _formObj.height[_selectArray.Height], length = _formObj.length[_selectArray.Length], color = s7_colors[_formObj.fabriccolor[_selectArray.FabricColor]] !== undefined ? s7_colors[_formObj.fabriccolor[_selectArray.FabricColor]] : "$white$";
                if (style && style !== undefined || (style = "a"), width && width !== undefined) if (width && !height || width && height === undefined) {
                    var setHeight = _formObj.height[_local.firstElement(_formObj.height)];
                    height = 10 > setHeight ? "0" + setHeight : setHeight;
                } else (width && height && !length || width && height && length === undefined) && (length = 20); else {
                    switch (width = "12", style.toLowerCase()) {
                      case "a":
                      case "b":
                        height = "08";
                        break;

                      case "c":
                        height = "09";
                    }
                    length = 20;
                }
                color && color !== undefined || (color = s7_colors[_formObj.fabriccolor.White]);
                var image_vs, logo_vs, image_url, imgRound = 500 * Math.round(Math.floor(1.5 * $(window).width()) / 500), imgWidth = 2e3 > imgRound ? imgRound > 500 ? imgRound : 500 : 1999, image_white = "", img_offset = 0;
                switch (!0) {
                  case length > 100:
                    length = "100", img_offset = "0,0";
                    break;

                  case 100 >= length && length > 90:
                    length = "100", img_offset = "0,0";
                    break;

                  case 90 >= length && length > 70:
                    length = "080", img_offset = "-0.04,0";
                    break;

                  case 70 >= length && length > 50:
                    length = "060", img_offset = "-0.06,0";
                    break;

                  case 50 >= length && length > 30:
                    length = "040", img_offset = "-0.10,0";
                    break;

                  case 30 >= length:
                  default:
                    length = "020", img_offset = "-0.18,0";
                }
                image_vs = ("pe-" + style + "b-0" + width + "xxx" + height + "_cover" + length).toLowerCase(), 
                logo_vs = ("pe-" + style + "b-0" + width + "xxx" + height + "_logo-frm").toLowerCase(), 
                image_white = ("pe-" + style + "b-0" + width + "xxx" + height + "_white").toLowerCase(), 
                $.ajax({
                    type: "POST",
                    url: "/image_collections/images.php",
                    data: {
                        cover: image_vs,
                        logo: logo_vs,
                        inside: image_white,
                        color: color.replace(/\$/g, ""),
                        guy: s7_guy,
                        offset: img_offset,
                        width: imgWidth
                    },
                    dataType: "json",
                    complete: function(data) {
                        if (data) {
                            results = jQuery.parseJSON(data.responseText);
                            var nImg = document.createElement("img");
                            nImg.setAttribute("src", results.url), nImg.setAttribute("class", "preload"), _preload.append(nImg), 
                            nImg.onload = function() {
                                return _i.attr("src", results.url), _NS.loading(!1), _local.center();
                            }, nImg.onerror = function() {
                                image_url = "Peak Frame" === _formObj.style[_selectArray.Style] ? "http://s7d2.scene7.com/is/image/ShelterLogic/blank_logo?layer=1&src=pe-ab-012xxx08_cover020&$white$&posN=-0.18,0&layer=2&src=pe-ab-012xxx08_white&posN=-0.18,0&layer=3&src=pe-ab-012xxx08_logo-frm&$gray$&posN=-0.18,0&layer=4&src=xx-xx-000xxx00_charact3&posN=-0.18,0&fmt=png-alpha&wid=1999&hei=1999" : "Barn Frame" === _formObj.style[_selectArray.Style] ? "http://s7d2.scene7.com/is/image/ShelterLogic/blank_logo?layer=1&src=pe-cb-012xxx09_cover020&$white$&posN=-0.18,0&layer=2&src=pe-cb-012xxx09_white&posN=-0.18,0&layer=3&src=pe-cb-012xxx09_logo-frm&$gray$&posN=-0.18,0&layer=4&src=xx-xx-000xxx00_charact3&posN=-0.18,0&fmt=png-alpha&wid=1999&hei=1999" : "Round Frame" === _formObj.style[_selectArray.Style] ? "http://s7d2.scene7.com/is/image/ShelterLogic/blank_logo?layer=1&src=pe-bb-012xxx08_cover020&$white$&posN=-0.18,0&layer=2&src=pe-bb-012xxx08_white&posN=-0.18,0&layer=3&src=pe-bb-012xxx08_logo-frm&$gray$&posN=-0.18,0&layer=4&src=xx-xx-000xxx00_charact3&posN=-0.18,0&fmt=png-alpha&wid=1999&hei=1999" : "http://s7d2.scene7.com/is/image/ShelterLogic/blank_logo?layer=1&src=pe-ab-012xxx08_cover020&$white$&posN=-0.18,0&layer=2&src=pe-ab-012xxx08_white&posN=-0.18,0&layer=3&src=pe-ab-012xxx08_logo-frm&$gray$&posN=-0.18,0&layer=4&src=xx-xx-000xxx00_charact3&posN=-0.18,0&fmt=png-alpha&wid=1999&hei=1999", 
                                _i.attr("src", image_url), _NS.loading(!1);
                                return _local.center();
                            };
                        } else console.log("Error: " + response.error);
                    }
                });
                _selectArray.Style.indexOf("hoose") >= 0 ? "" : $("#img_" + _selectArray.Style).trigger("click");
                return !0;
            },
            reset_selectArray: function(_dt_) {
                switch (_dt_) {
                  case "Style":
                    _selectArray.Width = null, _selectArray.Height = null, _selectArray.Length = null, 
                    _selectArray.FabricMaterial = null, _selectArray.FabricColor = null;
                    break;

                  case "Width":
                    _selectArray.Height = null, _selectArray.Length = null, _selectArray.FabricMaterial = null, 
                    _selectArray.FabricColor = null;
                    break;

                  case "Height":
                    _selectArray.Length = null, _selectArray.FabricMaterial = null, _selectArray.FabricColor = null;
                    break;

                  case "Length":
                    _selectArray.FabricMaterial = null, _selectArray.FabricColor = null;
                    break;

                  case "FabricMaterial":
                    _selectArray.FabricColor = null;
                    break;

                  case "FabricColor":                }
            },
            uiLoad: {
                getLoadNDoor: function() {
                    function ImageExist() {
                        if ("choose an option..." !== _selectArray.Style.toLowerCase() && "choose an option..." !== _selectArray.Width.toLowerCase() && "choose an option..." !== _selectArray.Height.toLowerCase()) {
                            var StyleMain = _formObj.style[_selectArray.Style].split(" ")[0], style = StyleMain.split("")[0], width = _formObj.width[_selectArray.Width], height = _formObj.height[_selectArray.Height], src = getBaseUrl() + "images/src/diagrams/" + StyleMain + "/" + style + "_" + width + "x" + height + ".png";
                            $.get(src).done(function() {
                                $("#theDiagram").each(function() {
                                    $(this).attr("src", src);
                                }), $("#diagram").each(function() {
                                    $(this).removeClass("hide");
                                });
                            }).fail(function() {
                                $("#theDiagram").each(function() {
                                    $(this).attr("src", "");
                                }), $("#diagram").each(function() {
                                    $(this).addClass("hide");
                                });
                            });
                        }
                    }
                    return _product_attr_spec.each(function() {
                        var _id = $(this).data("attribute-id"), _text = $(this).text();
                        "vendor_url" == _id ? ("no" == _text.toLowerCase() ? $("#" + _id).stop().slideUp() : $("#" + _id).stop().slideDown(), 
                        $("#" + _id).attr("href", _text)) : $("#" + _id + " .attribute").text(_text);
                    }), ImageExist();
                },
                setSelectedItems: function() {
                    if (!_selectArray) return !1;
                    _NS.uiEvent.whichChoice();
                    var _return = Object.keys(_selectArray).forEach(function(key) {
                        $('.UI[data-type="' + key + '"]').each(function() {
                            $(this).data("value") == _selectArray[key] && $(this).addClass(_info_selected_class);
                        }), $("#" + key + "Selected .attribute").text(null !== _formObj[key.toLowerCase()][_selectArray[key]] && _formObj[key.toLowerCase()][_selectArray[key]] !== undefined && _formObj[key.toLowerCase()][_selectArray[key]].indexOf(_defaultFormOption) < 0 ? "Width" == key || "Height" == key || "Length" == key ? _formObj[key.toLowerCase()][_selectArray[key]] + "'" : _formObj[key.toLowerCase()][_selectArray[key]] : "-");
                    });
                    return _return;
                },
                setUIListWidth: function() {
                    _ui_builder_list_li.width(UISlide.width), _ui_builder_list.width(UISlide.contanWidth), 
                    this.setSelectedItems(), this.getLoadNDoor();
                },
                duplicateInfo: function() {
                    _mobile_info_Main.html(_info_Main.html()), _accordion_dl_mobile.html(_accordion_dl_main.html());
                },
                ajaxModalConnect: function() {
                    $(".modalAjax").each(function() {
                        var _this = $(this), fileslocation = (window.location.host, getBaseUrl()), h = _this.attr("href").split("#").pop();
                        _this.attr("href", fileslocation + "modal/" + h + ".php");
                    });
                },
                updateCartCount: function() {
                    _cart_count.text(_miniCart.text());
                },
                getFormAndSetUI: function() {
                    return _ui_builder_list_li.each(function(index) {
                        var _e = $(this), _eAsset = _e.attr("id").split("choose").pop();
                        _eAsset = _eAsset.split("Fabric").pop(), _ui_quickNav.append('<div class="small-4 large-4 columns UI quickSelect" data-func="whichChoice" data-index="' + index + '">' + _eAsset + "</div>");
                    }), _ui_element_option.each(function() {
                        var _this = $(this);
                        if ("select" == _this.prop("tagName").toLowerCase()) {
                            var __type = _this.data("type"), _loc_select = $("." + _selectPartial + __type);
                            $(_loc_select).find("option").each(function() {
                                var _ = $(this), _new = (_.attr("value"), _.clone());
                                _new.attr("data-value", _.text()), _this.append(_new);
                            });
                        }
                    }), _buttonContainer.each(function() {
                        var _this = $(this), __id = _this.attr("id"), __type = __id.split("build_").pop(), _loc_select = $("." + _selectPartial + __type), _dataFunc = "setAttr";
                        $(_loc_select).find("option").each(function() {
                            var __this = $(this);
                            if ("startStyle" === _this.parent().attr("id") && (_dataFunc = "setStyle"), __this.text().indexOf(_defaultFormOption) < 0) switch (__type) {
                              case "Style":
                                var theText = __this.text().split("P");
                                _this.append('<button class="UI UI-Option button expand" data-func="' + _dataFunc + '" data-type="' + __type + '" data-value="' + __this.attr("value") + '">' + __this.text() + '<i class="fa fa-check center"></i></button>');
                                break;

                              case "FabricMaterial":
                                var theText = __this.text().split("P");
                                _this.append('<button class="UI UI-Option button expand textLeft hide-for-large-up" data-func="' + _dataFunc + '" data-type="' + __type + '" data-value="' + __this.attr("value") + '">' + theText[0] + '<i class="fa fa-check center"></i></button>'), 
                                _this.append('<button class="UI UI-Option button expand textLeft show-for-large-up" data-func="' + _dataFunc + '" data-type="' + __type + '" data-value="' + __this.attr("value") + '">' + __this.text() + '<i class="fa fa-check center"></i></button>');
                                break;

                              case "FabricColor":
                                _this.append('<button class="UI UI-Option button expand box-shadow textCenter makeSquare ' + __this.text().replace(" ", "_") + '" data-func="' + _dataFunc + '" data-type="' + __type + '" data-value="' + __this.attr("value") + '"> ' + __this.text() + ' <i class="fa fa-check centerVertical centerHorizontal"></i></button>');
                            }
                        });
                    }), this.setUIListWidth(), this.duplicateInfo();
                },
                setPrice: function() {
                    if (_price.doesExist()) {
                        var _total = _price.text();
                        "$0.00" === _total || "" === _total ? (_calcPrice.text("Build Your Building"), _addToCart.addClass("disabled")) : (_calcPrice.text(_total), 
                        _addToCart.removeClass("disabled"), $(".btn-cart").each(function() {
                            "none" == $(this).css("display") && _addToCart.text($(this).attr("data-text")).attr("data-func", $(this).attr("data-func"));
                        }));
                    }
                }
            },
            fireEvent: function(element, evttype) {
                if (document.createEventObject) {
                    if (is_IE10Below) {
                        if (el = element, document.createEvent) {
                            var evt = document.createEvent("HTMLEvents");
                            evt.initEvent(evttype, !1, !1), el.dispatchEvent(evt);
                        } else document.createEventObject && el.fireEvent("on" + evttype);
                        return this;
                    }
                    var evt = document.createEventObject();
                    return element.fireEvent("on" + evttype, evt);
                }
                var evt = document.createEvent("HTMLEvents");
                return evt.initEvent(evttype, !0, !0), !element.dispatchEvent(evt);
            },
            observing: {
                formChange: function() {
                    if (is_IE10Below) var timer = 5e3; else var timer = 200;
                    var formChanged = _.debounce(function() {
                        return is_IE10Below ? (setTimeout(_NS.init.getState, 2e3), $("#product_addtocart_form").unbind("DOMSubtreeModified")) : _NS.init.getState(!0) ? observer.disconnect() : void _NS.init.getState(!0);
                    }, timer, !0);
                    if (is_IE10Below) $("#product_addtocart_form").bind("DOMSubtreeModified", formChanged); else {
                        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
                        var observer = new MutationObserver(function(mutations) {
                            formChanged(mutations[0].target.id);
                        });
                        observer.observe(document.getElementById("product_addtocart_form"), {
                            subtree: !0,
                            attributes: !0,
                            childList: !0,
                            characterData: !0
                        });
                    }
                }
            },
            uiEvent: {
                "default": function() {
                    return $(".infoBuilderBox").removeClass(_info_selected_class), _ui_quickNav.stop().slideUp(), 
                    !0;
                },
                addToCart: function() {
                    _gaEvent.cart.added(), $(".add-to-cart-buttons button[data-id=atc-button]").trigger("click");
                },
                updateCart: function() {
                    _gaEvent.cart.updated(), $(".add-to-cart-buttons button.btn-cart").trigger("click");
                },
                getAQuote: function() {
                    _quoteModal.foundation("reveal", "open");
                },
                setAttr: function(_e_, simple) {
                    function _go(_value) {
                        var dataValue = _value;
                        _NS.reset_selectArray(dataType);
                        var cook = "build_" + dataType;
                        _local.buildCookie.tester(cook) && _local.buildCookie.relinquish(cook), "Style" == dataType && Object.keys(_local.buildCookie.getObj()).forEach(function(key) {
                            RegExp(/\b(_build_)/g).test(key) && _local.buildCookie.relinquish(key);
                        }), _local.buildCookie.set(cook, dataValue), _local.buildCookie.set(_lastBuild, dataType);
                        {
                            var _formE = $("." + _selectPartial + dataType);
                            _formE.attr("id");
                        }
                        if (simple) return _NS.observing.formChange();
                        $(_formE).stop().each(function() {
                            $(this).val(dataValue);
                        }), $(_formE).find("option").each(function() {
                            $(this).attr("value") == dataValue && $(this).attr(_info_selected_class, !0);
                        });
                        var obj = $(_formE).get();
                        Event.observe(obj[0], "change", function() {});
                        _NS.fireEvent(obj[0], "change");
                        return _NS.observing.formChange();
                    }
                    if (simple === undefined) var simple = !1, select = $(_e_.target); else var select = $(_e_), get = $.grep(select.attr("class").split(" "), function(v) {
                        return 0 === v.indexOf(_selectPartial);
                    }).join().split("_")[1];
                    var selecttype = select.prop("tagName"), is_select = "select" === selecttype.toLowerCase() ? !0 : !1, is_option = "option" === selecttype.toLowerCase() ? !0 : !1, is_button = "button" === selecttype.toLowerCase() ? !0 : !1, dataType = simple ? get : is_option ? select.parent().data("type") : select.data("type"), dataValue = simple ? select.val() : select.data("value");
                    if (this.default()) if (_gaEvent.uiEvent(selecttype, "click", (simple ? "simple_" : "complex_") + dataType), 
                    _selectArray[dataType] = dataValue, _lastSelection = dataType, is_select && is_explorer && !is_safari && !isMobile.any()) {
                        if (simple) return _go(select.val()), _NS.loading(!0);
                        select.on("change", function() {
                            return _go($(this).val()), $(this).unbind("change"), _NS.loading(!0);
                        });
                    } else {
                        if (is_select && is_safari && !isMobile.any()) return _go(select.val()), _NS.loading(!0);
                        if (!is_select || is_safari || isMobile.any()) {
                            if (is_select && isMobile.any()) select.on("blur", function() {
                                return _go($(this).val()), $(this).unbind("blur"), _NS.loading(!0);
                            }); else if (is_button) return _go(select.data("value")), _NS.loading(!0);
                        } else {
                            if (simple) return _go(select.val()), _NS.loading(!0);
                            select.on("change", function() {
                                return _go($(this).val()), $(this).unbind("change"), _NS.loading(!0);
                            });
                        }
                    } else ;
                },
                setStyle: function(_e_) {
                    if (this.default()) {
                        _NS.loading(!0);
                        {
                            var _e_type = $(_e_.target).prop("tagName");
                            "select" == _e_type.toLowerCase() ? !0 : !1, $(_e_.target).data("type"), $(_e_.target).data("value");
                        }
                        return $(".UISection #build_Style button[data-value*='" + $(_e_.target).data("value") + "']").trigger("click"), 
                        $("[data-reveal]").foundation("reveal", "close"), _bod.removeClass("start");
                    }
                },
                startOver: function() {
                    _local.buildCookie.clear();
                },
                whichChoice: function(e) {
                    if (this.default() && _ui_builder_list.doesExist()) {
                        var move = (UISlide.in_width - UISlide.width) / 2 + UISlide.width, curr_pos = parseInt(_ui_builder_list.css("left").split("px")[0].split("-").pop());
                        if (e) {
                            var _e = $(e.currentTarget);
                            if (_e.hasClass("fa")) if (_e.hasClass("prev")) var move_to = curr_pos - move; else var move_to = curr_pos + move; else if (_e.data("index") >= 0) {
                                var _position = _e.data("index"), check_move = move * _position;
                                if (check_move < UISlide.count * UISlide.width) var move_to = check_move; else var move_to = move * _position;
                            }
                        } else {
                            if (editConfiguration && 0 === _lastSelection) {
                                var _position = $("#chooseFabricColor").index();
                                _lastSelection = "FabricColor";
                            } else var _position = $("#choose" + _lastSelection).index();
                            _local.setActive(_position);
                            var check_move = move * (_position + 1);
                            if (check_move < UISlide.count * UISlide.width) var move_to = check_move; else var move_to = move * _position;
                        }
                        switch (_ui_builder_list.css({
                            left: "-" + move_to + "px"
                        }), 0 == move_to ? $(".prev").addClass("disable") : move_to >= (UISlide.count - 1) * UISlide.width ? $(".next").addClass("disable") : _ui_builder_nav_item.removeClass("disable"), 
                        step = "Step", _lastSelection) {
                          case "Style":
                            stepcount = 2;
                            break;

                          case "Width":
                            stepcount = 3;
                            break;

                          case "Height":
                            stepcount = 4;
                            break;

                          case "Length":
                            stepcount = 5;
                            break;

                          case "FabricMaterial":
                            stepcount = 6;
                            break;

                          case "FabricColor":
                            editConfiguration ? (stepcount = 1, step = 'Update - <i class="fa fa-angle-double-up"></i>') : (stepcount = 7, 
                            step = 'Buy - <i class="fa fa-cc-amex"></i> <i class="fa fa-cc-visa"></i> <i class="fa fa-cc-mastercard"></i> <i class="fa fa-credit-card"></i>');
                            break;

                          default:
                            stepcount = 1;
                        }
                        return progress = 100 / 7 * stepcount, $("#step-progress .meter.main").css("width", progress + "%").html(Math.ceil(progress) + "%");
                    }
                },
                getInfo: function(e) {
                    var infoId = $(e.target).data("infoid");
                    $("." + infoId).hasClass(_info_selected_class) ? $("." + infoId).removeClass(_info_selected_class) : ($("." + _uni_info_class).removeClass(_info_selected_class), 
                    $("." + infoId).addClass(_info_selected_class), $("." + infoId + " .scroll").height(_bod.hasClass("form-short") ? $(".leftSide .UIBottom .form").height() - 20 : $(".leftSide .UIBottom .UIBuilderContainer").height() + 8));
                },
                closeInfo: function(e) {
                    {
                        var _e = $(e.target);
                        _e.parent().attr("id");
                    }
                    return _e.parent().removeClass(_info_selected_class);
                },
                toggleQuickNav: function() {
                    return _ui_quickNav.stop().slideToggle();
                },
                closeAccordion: function() {
                    this.default() && $(".accordion-navigation, .accordion-navigation .content").removeClass("active");
                },
                checkOrientation: function(fired) {
                    if (this.default()) {
                        var landscape = !1;
                        switch (window.orientation) {
                          case 0:
                            landscape = !1;
                            break;

                          case 90:
                          case -90:
                            landscape = !0;
                        }
                        isMobile.any() && $(window).height() < 459 && landscape ? _landscapeMod.foundation("reveal", "open") : isMobile.any() && $(window).height() > 459 && !landscape && fired;
                    }
                }
            },
            resizer: function(f) {
                if (_local.isConfigurable() && setUISlide(), _screenWH.each(function() {
                    $(this).winHW(window, !0, !0, _local.center());
                }), _screenH.each(function() {
                    $(this).winHW(window, !0, !1, _local.center());
                }), _screenW.each(function() {
                    $(this).winHW(window, !1, !0, _local.center());
                }), _screenCenterHorizontal.each(function() {
                    $(this).centerHorizontal();
                }), _screenCenterVertical.each(function() {
                    $(this).centerVertical();
                }), _makeSquare.each(function() {
                    $(this).makeSQ();
                }), _NS.uiEvent.checkOrientation(f), isMobile.any() || $(window).width() <= 1025 ? ($(".accordion-navigation .content").stop().removeClass("active"), 
                $("dl.accordion").stop().data("options", "multi_expand:false;toggleable: true")) : ($(".accordion-navigation .content").stop().hasClass("active") || $(".accordion-navigation .content").stop().addClass("active"), 
                $("dl.accordion").stop().data("options", "multi_expand:true;toggleable: true")), 
                isMobile.any()) var cartCompresor = 2.4; else var cartCompresor = 1.1;
                $("#mainAccordion .panelnav, #mobileAccordion .panelnav").stop().fitText(1.2, {
                    minFontSize: "6px",
                    maxFontSize: "17px"
                }), $("#productTitle, #calcPrice").stop().fitText(1, {
                    minFontSize: "6px",
                    maxFontSize: "25px"
                }), $("#shortDesc").stop().fitText(cartCompresor, {
                    minFontSize: "4px",
                    maxFontSize: "20px"
                }), $("#addToCart").stop().fitText(cartCompresor, {
                    minFontSize: "10px",
                    maxFontSize: "25px"
                }), $("#build_FabricColor button").stop().fitText(cartCompresor, {
                    minFontSize: "10px",
                    maxFontSize: "25px"
                });
            },
            infoVisible: function() {
                $(".showInfo").each(function() {
                    var $this = $(this), infoEle = $("div." + $this.data("infoid")), infoContent = infoEle.find(".scroll").html();
                    infoContent || $this.hide();
                });
            },
            modalWork: {
                contactModal: function() {
                    $("#contactModal #infoTable").text("testing");
                },
                quoteModal: function() {
                    if (_quoteModal.doesExist() && _quoteMessage.doesExist()) {
                        var buildStatment = "";
                        Object.keys(_selectArray).forEach(function(key) {
                            _formObj[key.toLowerCase()][_selectArray[key]] !== undefined && (buildStatment = buildStatment + key + " - " + _formObj[key.toLowerCase()][_selectArray[key]] + ", ");
                        }), _quoteMessage.attr("value", "I would like a quote on a " + buildStatment + " building");
                    }
                }
            },
            loading: function(start) {
                var _unLoad = function() {
                    _bod.removeClass("loading"), _b.find("img#render").removeClass("op_0"), $(".elements .timer").removeClass("show"), 
                    $(".elements").removeClass("op_5"), $("#loader").removeClass("loading"), delete farmBuilding;
                };
                return start ? (_bod.addClass("loading"), _b.find("img#render").addClass("op_0"), 
                $(".elements .timer").addClass("show"), $(".elements").addClass("op_5"), $("#loader").addClass("loading")) : _unLoad(), 
                !0;
            },
            init: {
                getState: function(onloader) {
                    return _formObj = {
                        product_line: "PE",
                        style: {},
                        width: {},
                        height: {},
                        length: {},
                        fabricmaterial: {},
                        fabriccolor: {}
                    }, $(".buttonContainer, #quickNav, .UISection select").html(""), $("select[class^='" + _selectPartial + "']").each(function() {
                        var _CLASSSESplit = $(this).attr("class").split(" "), _CLASSSplit = _CLASSSESplit[0].split("_").pop(-1);
                        _class = _CLASSSplit.toLowerCase(), $(this).find("option").each(function() {
                            $(this).attr("value") && (_val = $(this).attr("value").toString(), _formObj[_class][_val] = $(this).text());
                        });
                    }), $("select[class^='" + _selectPartial + "']").each(function() {
                        var _CLASSSESplit = $(this).attr("class").split(" "), _CLASSSplit = _CLASSSESplit[0].split("_").pop(-1);
                        _selectArray[_CLASSSplit] = $(this).val();
                    }), _NS.uiLoad.getFormAndSetUI(), onloader && _NS.resizer(), _NS.infoVisible(), 
                    _NS.uiLoad.setPrice(), _NS.imageUrl();
                },
                loader: function() {
                    return _NS.uiLoad.ajaxModalConnect(), _local.isConfigurable() && !is_IE9Below ? Pace.on("done", function() {
                        editConfiguration || _NS.init.getState(!0) && _local.pop.start();
                    }) : farmBuilding.resizer(), !0;
                },
                refresh: function() {
                    return window.location = window.location.href.split("#")[0];
                }
            },
            common: {
                init: function() {
                    function parallax() {
                        var scrolled = $(window).scrollTop();
                        $(".parallax").each(function() {
                            var _e = $(this), offTop = (_e.outerHeight(), _e.offset().top - $(window).height()), scrollminus = parseInt(scrolled - offTop);
                            _e.isOnScreen() && _e.css("background-position", "center " + -(.5 * scrollminus) + "px");
                        });
                    }
                    {
                        var bodyChanged = _.debounce(function() {
                            $(".centerHorizontal").centerHorizontal(), $(".centerVertical").centerVertical(), 
                            $(".centerCenter").centerCenter(), $(".makeSquare").makeSQ();
                        }, 300);
                        _NS.geo.reference();
                    }
                    if ($(window).scroll(function() {
                        if (_bod.hasClass("checkout-onepage-index") || _bod.hasClass("checkout-cart-index")) return !1;
                        var _sp = $(window).scrollTop();
                        return _sp > 300 ? _.debounce($("#calltoaction").stop().slideDown(), 500) : _.debounce($("#calltoaction").stop().slideUp(), 500), 
                        !0;
                    }), _local.isConfigurable()) if (is_IE10Below) $("#cofiguratorMain").bind("DOMSubtreeModified", bodyChanged); else {
                        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
                        var observer = new MutationObserver(function() {
                            bodyChanged();
                        });
                        observer.observe(document.getElementById("cofiguratorMain"), {
                            subtree: !0,
                            attributes: !0,
                            childList: !1,
                            characterData: !1
                        });
                    }
                    $("#mycart").on("click", function(e) {
                        $(".header-minicart .skip-cart").trigger("click"), e.stopPropagation();
                    }), parallax(), $(window).scroll(function() {
                        parallax();
                    }), bodyChanged();
                }
            },
            cms_home: {
                init: function() {}
            },
            product_sp_series_shelter: {
                init: function() {
                    $(".form #product-options-wrapper dl dd").each(function() {
                        var _id = $(this).find("select").attr("id"), _this = $("#" + _id);
                        Event.observe(_this.get()[0], "change", function() {
                            return _NS.uiEvent.setAttr($(this), !0);
                        });
                    }), $(".videoModal").on("click", function(e) {
                        e.preventDefault(), $("#videoModal iframe").attr("src", $(this).data("youtube")).attr("data-src", $(this).data("youtube")), 
                        $("#videoModal").foundation("reveal", "open");
                    }), $("#videoModal").on("closed.fndtn.reveal", "[data-reveal]", function() {
                        var modal = $(this);
                        modal.find("iframe").attr("src", "").attr("data-src", "");
                    }), (hash && !isMobile.any() || hash && $(window).width() < 1e3) && hash.indexOf("simpleform") >= 0 && _showForm.trigger("click"), 
                    editConfiguration ? (setTimeout(function() {
                        _NS.init.getState(!0);
                    }, 500), $(".no-edit").remove()) : _NS.init.loader(), $("body").delegate(".UI", "click", function(e) {
                        if (e.preventDefault(), e.stopPropagation(), !$(this).hasClass("disable")) {
                            var func = $(this).data("func");
                            _.debounce(farmBuilding.uiEvent[func](e), 1e3, !0);
                        }
                    }), $(window).resize(function() {
                        _.debounce(farmBuilding.init.getState(!0), 1e3, !0);
                    });
                }
            },
            checkout_cart_index: {
                init: function() {
                    $(".btn-proceed-checkout span span").prepend('<i class="fa fa-shopping-cart"></i>'), 
                    $(".product-cart-image").each(function() {
                        _e = $(this);
                        var _href = "";
                        _e.find(".cart-links li a").each(function() {
                            "edit" == $(this).text().toLowerCase() && (_href = $(this).attr("href"), _e.find(".product-image").attr("href", _href));
                        });
                    });
                }
            },
            checkout_onepage_index: {
                init: function() {
                    function confirmExit() {
                        return $("#sendModal").foundation("reveal", "open"), checkoutAlert;
                    }
                    {
                        var cart = $("#cart-sidebar li");
                        cart.length;
                    }
                    cart.each(function() {
                        var pd = $(this).find(".product-details"), pn = pd.find(".product-name a").text(), pp = pd.find(".price").text(), sk = pd.find(".product-sku").text(), qt = pd.find(".qty-wrapper .qty.cart-item-quantity").val(), trunc = pd.find(".truncated .truncated_full_value .item-options"), trunc_text = "";
                        if (trunc.doesExist()) {
                            var trunc_html = trunc.clone().prop("innerHTML").replace(/(\r\n|\n|\r)/gm, "").replace(/\s\s/g, "").replace(/(\<\/dt\>\<dd\>)/g, " - ").replace(/(\<\/dd>\<dt\>)/g, "\n").replace(/(\<dt>|\<\/dd\>)/g, "");
                            trunc_text = "\n\r" + trunc_html + "\n\r\n\r";
                        }
                        var new_cart = "SKU: " + sk + ", " + pn + " - QTY(" + qt + ") - Price: " + pp + trunc_text;
                        $(".webforms-fields-send-cart-cart-data .input-box textarea").append(new_cart);
                    }), $(".webforms-fields-send-cart-subject .input-box input.input-text").val("Your cart detail on " + window.location.host), 
                    $("form input, form select").on("change", function() {
                        var b_fax = $('input[name="billing[fax]"]').val(), b_country = ($('input[name="billing[telephone]"]').val(), 
                        $('select[name="billing[country_id]"]').find("option:selected").text()), b_zip = $('input[name="billing[postcode]"]').val(), b_reg = $('select[name="billing[region_id]"]').find("option:selected").text(), b_cit = $('input[name="billing[city]"]').val(), b_add2 = $('input[title="Street Address 2"]').val(), b_add = $('input[title="Street Address"]').val(), b_em = $('input[name="billing[email]"]').val(), b_co = $('input[name="billing[company]"]').val(), b_ln = $('input[name="billing[lastname]"]').val(), b_fn = $('input[name="billing[firstname]"]').val(), b_text = "Name: " + b_fn + " " + b_ln + "\nCompany: " + b_co + "\nEmail: " + b_em + "\nAddress: " + b_add + "\nAddress 2: " + b_add2 + "\nCity: " + b_cit + "\nState: " + b_reg + "\nZip: " + b_zip + "\nCountry: " + b_country + "\nFax: " + b_fax;
                        $(".webforms-fields-send-cart-customer-data .input-box textarea").text(b_text);
                    });
                    var formOnChanged = _.debounce(function() {
                        $("#opc-review .btn-checkout").doesExist() && ($("#agreeTerms").doesExist() || $("#review-buttons-container").prepend('<button id="agreeTerms" title="Place Order" class="button" data-reveal-id="confirmModal" ><span><span>Place Order</span></span></button>'));
                    }, 100);
                    if ($(".validate-phoneStrict").inputmask("mask", {
                        mask: "(999) 999-9999"
                    }), is_IE10Below) $("#checkoutSteps").bind("DOMSubtreeModified", formOnChanged); else {
                        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
                        var formobserver = new MutationObserver(function() {
                            formOnChanged();
                        });
                        formobserver.observe(document.getElementById("checkoutSteps"), {
                            subtree: !0,
                            attributes: !0,
                            childList: !1,
                            characterData: !1
                        });
                    }
                    window.onbeforeunload = confirmExit, $("body").delegate("#confirmOrder", "click", function(e) {
                        return e.preventDefault(), e.stopPropagation(), $("[data-reveal]").foundation("reveal", "close"), 
                        window.onbeforeunload = !0, review.save();
                    });
                }
            }
        });
    }(farmBuilding = farmBuilding || {}), $(document).on("opened.fndtn.reveal", "#quoteModal", function() {
        return farmBuilding.modalWork.quoteModal();
    }), $(document).on("opened.fndtn.reveal", "[data-reveal]", function() {
        $(this);
        $("body").addClass("modalOpen"), $(".reveal-modal h2").fitText(1.45, {
            minFontSize: "6px",
            maxFontSize: "43px"
        }), $(".reveal-modal .color .btnColor span").fitText(1.45, {
            minFontSize: "10px",
            maxFontSize: "20px"
        }), $(".reveal-modal#startModal h2").fitText(1.1, {
            minFontSize: "6px",
            maxFontSize: "63px"
        }), $(".reveal-modal h4").fitText(1.4, {
            minFontSize: "6px",
            maxFontSize: "25px"
        });
        var bigbrother = -1;
        $(".orbit-slides-container li").each(function() {
            bigbrother = bigbrother > $(".orbit-slides-container li").height() ? bigbrother : $(".orbit-slides-container li").height();
        }), $(".orbit-slides-container").each(function() {
            $(".orbit-slides-container").height(bigbrother);
        }), _screenCenterHorizontal.centerHorizontal(), _screenCenterVertical.centerVertical(), 
        _screenCenter.centerCenter(), _makeSquare.makeSQ();
    }), $(document).on("close.fndtn.reveal", "[data-reveal]", function() {
        return $("body").removeClass("modalOpen");
    });
    var UTIL = {
        fire: function(func, funcname, args) {
            var namespace = farmBuilding;
            funcname = void 0 === funcname ? "init" : funcname, "" !== func && namespace[func] && "function" == typeof namespace[func][funcname] && namespace[func][funcname](args);
        },
        loadEvents: function() {
            UTIL.fire("common"), $.each(document.body.className.replace(/-/g, "_").split(/\s+/), function(i, classnm) {
                UTIL.fire(classnm);
            });
        }
    };
    $(document).ready(function() {
        $("#showForm").on("click", function(e) {
            e.preventDefault(), clearTimeout(hash_timer);
            var hash = window.location.hash, this_hash = hash.replace("!simpleform", "");
            $("#simpleUI").toggleClass("show"), $("body").toggleClass("form-short"), $("#fancyUI").toggleClass("show");
            var hash_timer = setTimeout(function() {
                window.location.hash = $("#fancyUI").hasClass("show") ? this_hash : this_hash + "!simpleform";
            }, 500);
        }), $(".menu-icon").click(function() {});
    }), $(window).load(UTIL.loadEvents);
}(jQuery);